import java.util.Stack;
import java.util.HashSet;
import java.util.Set;

aspect ConditionInference {

  public void Procedure.addFrameCondition(ValueReference reference) {
    final FrameCondition condition = new FrameCondition(false, new List<>(reference));
    final Variable modified = getProcedureDeclaration()
      .lookupRemoteVariable(reference.getAccessor().getName())
      .orElseThrow(() -> new IllegalStateException("Cannot infer frame condition targeting an unbound variable"));
    final Stack<Procedure> next = new Stack<>();
    next.push(this);

    while (!next.isEmpty()) {
      final Procedure procedure = next.pop();

      if (!procedure.modifies(modified)) {
        final ProcedureDeclaration declaration = procedure.getProcedureDeclaration();
        declaration.addSpecification(condition.fullCopy());

        for (Procedure calling : procedure.calling()) {
          next.push(calling);
        }
      }
    }
  }

  public void Variable.inferModifies() {
    for (AssignmentStatement assignment : assignments()) {
      assignment.getProcedure().addFrameCondition(makeValueReference());
    }
  }

  public void Program.inferModifies() {
    for (Variable variable : variables()) {
      variable.inferModifies();
    }
  }
  
}
