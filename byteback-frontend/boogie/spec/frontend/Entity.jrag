import java.util.Optional;
import java.util.Collection;
import java.util.LinkedList;

aspect Entity {

    public class EntityTable<T extends Entity> extends LinkedList<T> {

        public EntityTable() {
            super();
        }

        public Optional<T> getFirst(String name) {
            for (T entity : this) {
                if (entity.getName().equals(name)) {
                    return Optional.of(entity);
                }
            }

            return Optional.empty();
        }

        public Collection<T> getAll(String name) {
            final Collection<T> entities = new LinkedList<>();

            for (T entity : this) {
                if (entity.getName().equals(name)) {
                    entities.add(entity);
                }
            }

            return entities;
        }
        
    }

    inh Declaration Entity.getDeclaration();

    eq VariableDeclaration.getChild().getDeclaration() = this;

    eq ConstantDeclaration.getChild().getDeclaration() = this;

    eq FunctionDeclaration.getChild().getDeclaration() = this;

    eq ProcedureDeclaration.getChild().getDeclaration() = this;

    eq ImplementationDeclaration.getChild().getDeclaration() = this;

    syn lazy Optional<Attribute> Entity.lookupAttribute(String key);

    eq Entity.lookupAttribute(String key) {
        for (Attribute attribute : getDeclaration().getAttributeList()) {
            if (attribute.getName().equals(key)) {
                return Optional.of(attribute);
            }
        }

        return Optional.empty();
    }

    syn String Entity.getName();

    eq Entity.getName() = getDeclarator().getName();
    
}
