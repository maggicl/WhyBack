import java.util.Optional;

aspect Function {

    /**
     * Scope collections.
     */
    coll EntityTable<Function> Program.functions();

    FunctionDeclaration contributes getFunction() to Program.functions();

    /**
     * NTA definitions.
     */
    syn nta Function FunctionDeclaration.getFunction();

    eq FunctionDeclaration.getFunction() {
        final Function function = new Function();
        final Signature signature = getSignature();
        function.setDeclarator(getDeclarator());
        function.setExpressionOpt(getExpressionOpt());

        return function;
    }

    /**
     * Looking up functions.
     */
    syn lazy Optional<Function> Accessor.function();

    eq Accessor.function() = lookupFunction(getName());

    /**
     * Lookup function in program.
     */
    syn lazy Optional<Function> Program.lookupFunction(String name);

    eq Program.lookupFunction(String name) = functions().getFirst(name);

    inh lazy Optional<Function> Accessor.lookupFunction(String name);

    eq Program.getChild().lookupFunction(String name) = lookupFunction(name);

    /**
     * Get declaration from function entity.
     */
    inh lazy FunctionDeclaration Function.getFunctionDeclaration();

    eq FunctionDeclaration.getChild().getFunctionDeclaration() = this;

    /**
     * Create a function reference with unbound arguments.
     */
    syn FunctionReference Function.getReference();

    eq Function.getReference() = new FunctionReference(getFunctionDeclaration().getDeclarator().getAccessor(), new List<>());
}
