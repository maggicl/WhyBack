import java.util.Iterator;

aspect Print {

    interface Printable {

        void print(StringBuilder builder);

    }

    class PrintUtil {

        static void printList(final StringBuilder builder, final String separator, final List<? extends Printable> printableList) {
            final Iterator<? extends Printable> iterator = printableList.iterator();

            while (iterator.hasNext()) {
                iterator.next().print(builder);

                if (iterator.hasNext()) {
                    builder.append(separator);
                }
            }
        }

    }

    Program implements Printable;

    public void Program.print(final StringBuilder builder) {
        PrintUtil.printList(builder, "\n\n", getDeclarationList());
    }

    Declaration implements Printable;

    public void Declaration.printAttributes(final StringBuilder builder) {
        PrintUtil.printList(builder, " ", getAttributeList());

        if (getAttributeList().getNumChild() > 0) {
            builder.append(" ");
        }
    }

    public void VariableDeclaration.print(final StringBuilder builder) {
        builder.append("var ");
        super.printAttributes(builder);
        PrintUtil.printList(builder, ", ", getBindingList());
        builder.append(";");
    }

    public void ConstantDeclaration.print(final StringBuilder builder) {
        builder.append("const ");
        super.printAttributes(builder);

        if (getUnique()) {
            builder.append("unique ");
        }
        
        getBinding().print(builder);

        if (hasOrderSpecification()) {
            builder.append(" ");
            getOrderSpecification().print(builder);
        }

        builder.append(";");
    }

    public void AxiomDeclaration.print(final StringBuilder builder) {
        builder.append("axiom ");
        super.printAttributes(builder);
        getExpression().print(builder);
        builder.append(";");
    }

    public void FunctionDeclaration.print(final StringBuilder builder) {
        builder.append("function ");
        super.printAttributes(builder);
        builder.append(getDeclarator().getName());
        getSignature().print(builder);

        if (hasExpression()) {
            builder.append(" { ");
            getExpression().print(builder);
            builder.append(" }");
        } else {
            builder.append(";");
        }
    }

    public void ProcedureDeclaration.print(final StringBuilder builder) {
        builder.append("procedure ");
        super.printAttributes(builder);
        builder.append(getDeclarator().getName());
        getSignature().print(builder);

        if (hasBody()) {
            // TODO
        } else {
            builder.append(";");
        }
    }

    public void ImplementationDeclaration.print(final StringBuilder builder) {
        builder.append("implementation ");
        super.printAttributes(builder);
        builder.append(getDeclarator().getName());
        getSignature().print(builder);
        // TODO
    }

    public void TypeDeclaration.print(final StringBuilder builder) {
        builder.append("type ");
        super.printAttributes(builder);
    }

    public void TypeConstructorDeclaration.print(final StringBuilder builder) {
        super.print(builder);

        if (getFinite()) {
            builder.append("finite ");
        }

        builder.append(getDeclarator().getName());
        builder.append(" ");
        PrintUtil.printList(builder, ", ", getParameterList());
    }

    public void TypeSynonymDeclaration.print(final StringBuilder builder) {
        super.print(builder);
        builder.append(getDeclarator().getName());
        builder.append(" ");
        PrintUtil.printList(builder, ", ", getParameterList());
        builder.append(" = ");
        getAliased().print(builder);
    }

    Signature implements Printable;

    public void Signature.print(final StringBuilder builder) {
        builder.append("(");
        PrintUtil.printList(builder, ", ", getInputBindingList());
        builder.append(")");
        builder.append(" returns ");
        builder.append("(");
        PrintUtil.printList(builder, ", ", getOutputBindingList());
        builder.append(")");
    }

    OrderSpecification implements Printable;

    public void OrderSpecification.print(final StringBuilder builder) {
        builder.append("<: ");
        PrintUtil.printList(builder, ", ", getParentEdgeList());
    }

    ParentEdge implements Printable;

    public void ParentEdge.print(final StringBuilder builder) {
        if (getUnique()) {
            builder.append("unique ");
        }

        getParentConstant().print(builder);
    }

    Binding implements Printable;

    public void SetBinding.print(final StringBuilder builder) {
        PrintUtil.printList(builder, ", ", getDeclaratorList());
        builder.append(" : ");
        getTypeAccess().print(builder);
    }

    public void OptionalBinding.print(final StringBuilder builder) {
        if (hasDeclarator()) {
            getDeclarator().print(builder);
            builder.append(" : ");
        }

        getTypeAccess().print(builder);
    }

    public void BoundedBinding.print(final StringBuilder builder) {
        super.print(builder);

        if (hasWhereClause()) {
            getWhereClause().print(builder);
        }
    }

    WhereClause implements Printable;

    public void WhereClause.print(final StringBuilder builder) {
        getExpression().print(builder);
    }

    TypeAccess implements Printable;

    public void BoolTypeAccess.print(final StringBuilder builder) {
        builder.append("bool");
    }

    public void IntegerTypeAccess.print(final StringBuilder builder) {
        builder.append("int");
    }

    public void RealTypeAccess.print(final StringBuilder builder) {
        builder.append("real");
    }

    public void BitvectorTypeAccess.print(final StringBuilder builder) {
        builder.append(getDefinition());
    }

    public void UnknownTypeAccess.print(final StringBuilder builder) {
        getAccessor().print(builder);
        PrintUtil.printList(builder, " ", getArgumentList());
    }

    public void MapTypeAccess.print(final StringBuilder builder) {
        builder.append("<");
        PrintUtil.printList(builder, ", ", getParameterList());
        builder.append(">");
        builder.append("[");
        PrintUtil.printList(builder, ", ", getKeyTypeList());
        builder.append("]");
        getValueType().print(builder);
    }

    Option implements Printable;

    public void Trigger.print(final StringBuilder builder) {
        builder.append("{");
        PrintUtil.printList(builder, ", ", getExpressionList());
        builder.append("}");
    }

    public void Attribute.print(final StringBuilder builder) {
        builder.append("{");
        builder.append(":");
        builder.append(getName());
        builder.append(" ");
        PrintUtil.printList(builder, ", ", getArgumentList());
        builder.append("}");
    }

    Meta implements Printable;

    public void Star.print(final StringBuilder builder) {
        builder.append("*");
    }

    public void Expression.print(final StringBuilder builder) {}

    public void Literal.print(final StringBuilder builder) {
        builder.append(getValue());
    }

    public void BinaryExpression.print(final StringBuilder builder) {
        printLeftOperand(builder);
        builder.append(" ");
        printOperator(builder);
        builder.append(" ");
        printRightOperand(builder);
    }

    public void BinaryExpression.printLeftOperand(final StringBuilder builder) {
        getLeftOperand().print(builder);
    }

    public void BinaryExpression.printRightOperand(final StringBuilder builder) {
        getRightOperand().print(builder);
    }

    public abstract void BinaryExpression.printOperator(final StringBuilder builder);

    public void EquivalenceOperation.printOperator(final StringBuilder builder) {
        builder.append("<==>");
    }

    public void ImplicationOperation.printOperator(final StringBuilder builder) {
        builder.append("==>");
    }

    public void AndOperation.printOperator(final StringBuilder builder) {
        builder.append("&&");
    }

    public void OrOperation.printOperator(final StringBuilder builder) {
        builder.append("||");
    }

    public void EqualsOperation.printOperator(final StringBuilder builder) {
        builder.append("==");
    }

    public void NotEqualsOperation.printOperator(final StringBuilder builder) {
        builder.append("!=");
    }

    public void LessThanOperation.printOperator(final StringBuilder builder) {
        builder.append("<");
    }

    public void GreaterThanOperation.printOperator(final StringBuilder builder) {
        builder.append(">");
    }

    public void GreaterThanEqualsOperation.printOperator(final StringBuilder builder) {
        builder.append(">=");
    }

    public void LessThanEqualsOperation.printOperator(final StringBuilder builder) {
        builder.append("<=");
    }

    public void PartialOrderOperation.printOperator(final StringBuilder builder) {
        builder.append("<:");
    }

    public void AdditionOperation.printOperator(final StringBuilder builder) {
        builder.append("+");
    }

    public void SubtractionOperation.printOperator(final StringBuilder builder) {
        builder.append("-");
    }

    public void MultiplicationOperation.printOperator(final StringBuilder builder) {
        builder.append("*");
    }

    public void DivisionOperation.printOperator(final StringBuilder builder) {
        builder.append("/");
    }

    public void ModuloOperation.printOperator(final StringBuilder builder) {
        builder.append("%");
    }

    public void ConcatenationOperation.printOperator(final StringBuilder builder) {
        builder.append("++");
    }

    public void NegationOperation.print(final StringBuilder builder) {
        builder.append("!");
        getOperand().print(builder);
    }

    public void MinusOperation.print(final StringBuilder builder) {
        builder.append("-");
        getOperand().print(builder);
    }

    public void MapAccessOperation.print(final StringBuilder builder) {
        getOperand().print(builder);
        getSelect().print(builder);
    }

    public void MapRangedAccessOperation.print(final StringBuilder builder) {
        getOperand().print(builder);
        builder.append("[");
        builder.append(getRangeStart());
        builder.append(getRangeEnd());
        builder.append("]");
    }

    public void MapUpdateOperation.print(final StringBuilder builder) {
        getOperand().print(builder);
        builder.append("[");
        PrintUtil.printList(builder, ", ", getSelect().getExpressionList());
        builder.append(" := ");
        getUpdate().print(builder);
        builder.append("]");
    }

    public void SymbolicReference.print(final StringBuilder builder) {
        getAccessor().print(builder);
    }

    public void FunctionReference.print(final StringBuilder builder) {
        super.print(builder);
        builder.append("(");
        PrintUtil.printList(builder, ", ", getArgumentList());
        builder.append(")");
    }

    public void OldReference.print(final StringBuilder builder) {
        builder.append("old(");
        getArgument().print(builder);
        builder.append(")");
    }

    public void QuantifierExpression.print(final StringBuilder builder) {
        builder.append("(");
        getQuantifier().print(builder);
        builder.append(" ");
        builder.append("<");
        PrintUtil.printList(builder, ", ", getParameterList());
        builder.append(">");
        builder.append(" ");
        PrintUtil.printList(builder, ", ", getBindingList());
        builder.append(" :: ");
        PrintUtil.printList(builder, ", ", getOptionList());
        builder.append(" ");
        getOperand().print(builder);
        builder.append(")");
    }

    Quantifier implements Printable;

    public void UniversalQuantifier.print(final StringBuilder builder) {
        builder.append("forall");
    }

    public void ExistentialQuantifier.print(final StringBuilder builder) {
        builder.append("exists");
    }

    Statement implements Printable;

    public void Statement.print(final StringBuilder builder) {
        System.out.println("?;");
    }

    public void Statement.indentPrint(final StringBuilder builder, final int level) {
        for (int i = 0; i < level; ++i) {
            builder.append("  ");
        }

        print(builder);
    }

    MapSelect implements Printable;

    public void MapSelect.print(final StringBuilder builder) {
        builder.append("[");
        PrintUtil.printList(builder, ", ", getExpressionList());
        builder.append("]");
    }

    Declarator implements Printable;

    public void Declarator.print(final StringBuilder builder) {
        builder.append(getName());
    }

    Accessor implements Printable;

    public void Accessor.print(final StringBuilder builder) {
        builder.append(getName());
    }

}
