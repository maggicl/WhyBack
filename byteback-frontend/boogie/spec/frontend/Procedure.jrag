import java.util.LinkedList;

aspect Procedure {

  /**
   * Procedures defined in the program.
   */
  coll EntityTable<Procedure> Program.procedures();

  ProcedureDeclaration contributes
    getProcedure() to Program.procedures();

  /**
   * Procedures called.
   */
  coll LinkedList<Procedure> Procedure.called();

  CallStatement contributes
    getAccessor().procedure().orElse(null) to Procedure.called()
    for getProcedure();

  /**
   * Procedures calling.
   */
  coll LinkedList<Procedure> Procedure.calling();

  CallStatement contributes
    getProcedure() to Procedure.calling()
    for getAccessor().procedure().orElse(null);

  /**
   * Frame conditions used by procedure.
   */
  coll LinkedList<ValueReference> Procedure.frameConditions();

  FrameCondition contributes
    each getReferenceList() to Procedure.frameConditions()
    for getProcedure();

  /**
   * NTA definitions.
   */
  syn nta Procedure ProcedureDeclaration.getProcedure();

  eq ProcedureDeclaration.getProcedure() = new Procedure(getDeclarator());

  /**
   * Link statement to procedure.
   */
  inh lazy Procedure Statement.getProcedure();

  /**
   * Link specification to procedure.
   */
  inh lazy Procedure Specification.getProcedure();

  eq ProcedureDeclaration.getChild().getProcedure() = getProcedure();

  /**
   * Looking up procedures.
   */
  syn lazy Optional<Procedure> Accessor.procedure();

  eq Accessor.procedure() = lookupProcedure(getName());

  syn lazy Optional<Procedure> Program.lookupProcedure(String name);

  eq Program.lookupProcedure(String name) = procedures().getFirst(name);

  inh lazy Optional<Procedure> Accessor.lookupProcedure(String name);

  eq Program.getChild().lookupProcedure(String name) = lookupProcedure(name);

  /**
   * Link procedure to declaration.
   */
  inh lazy ProcedureDeclaration Procedure.getProcedureDeclaration();

  eq ProcedureDeclaration.getChild().getProcedureDeclaration() = this;

  /**
   * Create targeted call with unbound arguments.
   */
  syn TargetedCallStatement Procedure.makeTargetedCall();
  
  eq Procedure.makeTargetedCall() = new TargetedCallStatement(
     getDeclarator().makeAccessor(), new List<>(), new List<>());

  /**
   * Link procedure to body.
   */
  inh lazy Body Procedure.getBody();

  eq ProcedureDeclaration.getChild().getBody() = getBody();

  /**
   * Link procedure to specifications.
   */
  inh lazy List<Specification> Procedure.getSpecificationList();

  eq ProcedureDeclaration.getChild().getSpecificationList() = getSpecificationList();

  /**
   * Check if procedures modifies a certain value reference.
   */
  syn boolean Procedure.modifies(Variable variable);

  eq Procedure.modifies(Variable variable) {
    for (ValueReference reference : frameConditions()) {
      final Variable modified = reference.getAccessor().variable().get();

      if (modified.equals(variable)) {
        return true;
      }
    }

    return false;
  }

}
