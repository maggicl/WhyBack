import java.util.Optional;

aspect Type {

    /**
     * Scope collections.
     */
    coll EntityTable<TypeDefinition> Program.typeDefinitions();

    TypeDeclaration contributes getTypeDefinition() to Program.typeDefinitions();

    /**
     * NTA definitions.
     */
    syn nta TypeDefinition TypeDeclaration.getTypeDefinition();

    eq TypeDeclaration.getTypeDefinition() {
        final DefinedType type = new DefinedType();
        final TypeDefinition typeDefinition = new TypeDefinition();
        typeDefinition.setDefinedType(type);
        typeDefinition.setDeclarator(getDeclarator());

        return typeDefinition;
    }

    eq TypeSynonymDeclaration.getTypeDefinition() {
        final TypeDefinition typeDefinition = super.getTypeDefinition();
        typeDefinition.setAliased(getAliased());

        return typeDefinition;
    }

    /**
     * Looking up type definitions.
     */
    syn lazy Optional<TypeDefinition> Accessor.type();

    eq Accessor.type() = lookupTypeDefinition(getName());

    /**
     * Lookup type definition in program.
     */
    syn lazy Optional<TypeDefinition> Program.lookupTypeDefinition(String name);

    eq Program.lookupTypeDefinition(String name) = typeDefinitions().getFirst(name);

    inh lazy Optional<TypeDefinition> Accessor.lookupTypeDefinition(String name);

    eq Program.getChild().lookupTypeDefinition(String name) = lookupTypeDefinition(name);

    /**
     * Link type definitions with concrete types.
     */
    syn nta Type TypeDefinition.getType();

    eq TypeDefinition.getType() = new DefinedType();

    /**
     * Link concrete types with their accessors.
     */
    syn lazy TypeAccess Type.getTypeAccess();

    eq BooleanType.getTypeAccess() = new BooleanTypeAccess();

    eq IntegerType.getTypeAccess() = new IntegerTypeAccess();

    eq RealType.getTypeAccess() = new RealTypeAccess();

    eq MapType.getTypeAccess() = new MapTypeAccess(); // TODO: Fetch constructor arguments

    eq BitvectorType.getTypeAccess() = new BitvectorTypeAccess();

    eq DefinedType.getTypeAccess() = new UnknownTypeAccess(getAccessor(), new List<>());

    /**
     * Defined type attributes. 
     */
    inh lazy Accessor DefinedType.getAccessor();

    eq TypeDeclaration.getTypeDefinition().getAccessor() = new Accessor(getDeclarator().getName());

    inh lazy List<TypeParameter> DefinedType.getTypeParameterList();

    eq TypeDeclaration.getTypeDefinition().getTypeParameterList() = getTypeParameterList();

}
