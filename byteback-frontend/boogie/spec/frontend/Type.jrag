import java.util.Optional;

aspect Type {

    /**
     * Scope collections.
     */
    coll EntityTable<TypeDefinition> Program.typeDefinitions();

    TypeDeclaration contributes getTypeDefinition() to Program.typeDefinitions();

    /**
     * NTA definitions.
     */
    syn nta TypeDefinition TypeDeclaration.getTypeDefinition();

    eq TypeDeclaration.getTypeDefinition() {
        final DefinedType type = new DefinedType();
        final TypeDefinition typeDefinition = new TypeDefinition();
        typeDefinition.setDefinedType(type);
        typeDefinition.setDeclarator(getDeclarator());

        return typeDefinition;
    }

    eq TypeSynonymDeclaration.getTypeDefinition() {
        final TypeDefinition typeDefinition = super.getTypeDefinition();
        typeDefinition.setAliased(getAliased());

        return typeDefinition;
    }

    /**
     * Looking up types.
     */
    syn lazy Optional<TypeDefinition> Accessor.type();

    eq Accessor.type() = lookupTypeDefinition(getName());

    /**
     * Lookup type in program.
     */
    syn lazy Optional<TypeDefinition> Program.lookupTypeDefinition(String name);

    eq Program.lookupTypeDefinition(String name) = typeDefinitions().getFirst(name);

    inh lazy Optional<TypeDefinition> Accessor.lookupTypeDefinition(String name);

    eq Program.getChild().lookupTypeDefinition(String name) = lookupTypeDefinition(name);

}
