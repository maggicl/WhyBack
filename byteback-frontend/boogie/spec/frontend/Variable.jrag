import java.util.LinkedList;

aspect Variable {

    interface Scope {
        EntityTable<Variable> variables();
    }

    Program implements Scope;

    Function implements Scope;

    Procedure implements Scope;

    Implementation implements Scope;

    Body implements Scope;

    /**
     * Scope collections.
     */
    coll EntityTable<Variable> Scope.variables();

    Binding contributes
        each getVariableList() to Scope.variables()
        for each getScopes();

    inh List Binding.getScopes();

    eq Program.getChild().getScopes() = new List(this);

    eq FunctionDeclaration.getChild().getScopes() = new List(getFunction());

    eq ProcedureDeclaration.getChild().getScopes() = new List(getProcedure());

    eq ImplementationDeclaration.getChild().getScopes() = getImplementationList();

    eq Body.getChild().getScopes() = new List(this);

    /**
     * NTA definitions.
     */
    syn nta List<Variable> Binding.getVariableList();
    
    eq OptionalBinding.getVariableList() {
        final List<Variable> variables = new List<>();

        if (hasDeclarator()) {
            variables.add(new Variable(getDeclarator(), getTypeAccess()));
        }

        return variables;
    }

    eq SetBinding.getVariableList() {
        final List<Variable> variables = new List<>();

        for (Declarator declarator : getDeclaratorList()) {
            variables.add(new Variable(declarator, getTypeAccess()));
        }

        return variables;
    }

    /**
     * Lookup variables in program.
     */
    syn lazy Optional<Variable> Program.lookupVariable(String name);

    eq Program.lookupVariable(String name) = variables().getFirst(name);

    inh lazy Optional<Variable> Accessor.lookupVariable(String name);

    eq Program.getChild().lookupVariable(String name) = lookupVariable(name);

    /**
     * Get reference to variable.
     */
    syn ValueReference Variable.getValueReference();

    eq Variable.getValueReference() = new ValueReference(getDeclarator().getAccessor());

}
