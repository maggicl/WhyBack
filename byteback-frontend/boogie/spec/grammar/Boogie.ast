// Root node
//
// A Boogie program is composed of a set of declarations.
Program ::= Declaration*;

// Node declaring a new symbol.
Declarator ::= <Name:String>;

// Node accessing a declared symbol.
Accessor ::= <Name:String>;

// Binding
//
// A binding can be used to declare a variable of a specific type.
abstract Binding ::= Type:Type;

SetBinding : Binding ::= Declarators:Declarator*;

OptionalBinding : Binding ::= [Declarator:Declarator];

BoundedBinding : SetBinding ::= [WhereClause:WhereClause];

WhereClause ::= Expression:Expression;

// Type
//
// A type node in this case always corresponds to a type access.
abstract Type;

BoolType : Type;

IntegerType : Type;

RealType : Type;

BitvectorType : Type ::= <Size:String>;

UnknownType : Type ::= Name:Accessor TypeParameters:Type*;

MapType : Type ::= TypeArguments:Declarator* KeyTypes:Type* ValueType:Type;

// Option
//
// Some entities in Boogie can be annotated using a set of
// options. Every declaration in the program can be associated with a
// set of attributes, while trigger expressions are reserved for
// quantifiers.
abstract Option;

Attribute : Option ::= <Name:String> Arguments:Expression*;

Trigger : Option ::= Expressions:Expression*;

// Declaration
//
// A declaration always must always correlate to a set of declarators.
abstract Declaration ::= Attributes:Attribute*;

// Signature
//
// Signature nodes for functions, procedures and implementations.
abstract Signature ::= TypeArguments:Declarator*;

FunctionSignature : Signature ::= InputArguments:OptionalBinding* ReturnArgument:OptionalBinding;

ProcedureSignature : Signature ::= InputParameters:BoundedBinding* OutputParameters:BoundedBinding*;

ImplementationSignature : Signature ::= InputParameters:SetBinding* OutParameters:SetBinding*;

// Type declaration
abstract TypeDeclaration : Declaration ::= Declarator:Declarator VariableDeclarators:Declarator*;

TypeConstructor : TypeDeclaration ::= <Finite:Boolean>;

TypeSynonym : TypeDeclaration ::= Aliased:Type;

// Axiom declaration
AxiomDeclaration : Declaration ::= Expression:Expression;

// Function declaration
FunctionDeclaration : Declaration ::= Declarator:Declarator Signature:FunctionSignature [Expression:Expression];

// Constant declaration
ConstantDeclaration : Declaration ::= Binding:SetBinding <Unique:Boolean> [OrderSpecification:OrderSpecification];

OrderSpecification ::= ParentEdges:ParentEdge* <Complete:Boolean>;

ParentEdge ::= ParentConstant:Accessor <Unique:Boolean>;

// Variable declaration
VariableDeclaration : Declaration ::= Binding:BoundedBinding*;

// Procedure declaration
ProcedureDeclaration : Declaration ::= Declarator:Declarator Signature:ProcedureSignature Conditions:Specification* [Body];

// Implementation declaration
ImplementationDeclaration : Declaration ::= Declarator:Declarator Signature:ImplementationSignature Bodies:Body*;

Body ::= LocalVariables:VariableDeclaration* Statements:Statement*;

// Expressions
abstract Meta;

Star : Meta;

abstract Expression : Meta;

abstract BinaryExpression : Expression ::= LeftOperand:Expression RightOperand:Expression;

abstract UnaryExpression: Expression ::= Operand:Expression;

// Boolean expressions
EquivalenceOperation : BinaryExpression;

ImplicationOperation : BinaryExpression;

OrOperation : BinaryExpression;

AndOperation : BinaryExpression;

NegationOperation : UnaryExpression;

// Relational expressions
EqualsOperation : BinaryExpression;

NotEqualsOperation : BinaryExpression;

LessThanOperation : BinaryExpression;

GreaterThanOperation : BinaryExpression;

LessThanEqualsOperation : BinaryExpression;

GreaterThanEqualsOperation : BinaryExpression;

PartialOrderOperation : BinaryExpression;

// Arithmetic expressions
AdditionOperation : BinaryExpression;

SubtractionOperation : BinaryExpression;

MultiplicationOperation : BinaryExpression;

DivisionOperation : BinaryExpression;

ModuloOperation : BinaryExpression;

MinusOperation : UnaryExpression;

// Bitvector expressions
ConcatenationOperation : BinaryExpression;

// Map expressions
abstract MapOperation : UnaryExpression;

MapAccessOperation : MapOperation ::= Select:MapSelect;

MapRangedAccessOperation : MapOperation ::= <RangeStart:NumberLiteral> <RangeEnd:NumberLiteral>;

MapUpdateOperation : MapAccessOperation ::= Update:Expression;

MapSelect ::= Expressions:Expression*;

// Symbolic reference
abstract SymbolicReference : Expression ::= Accessor:Accessor;

ValueReference : SymbolicReference;

FunctionReference : SymbolicReference ::= Arguments:Expression*;

// Old reference
OldReference : Expression ::= Argument:Expression;

// Quantifier expression
QuantifierExpression : UnaryExpression ::= Quantifier:Quantifier TypeArguments:Declarator* Parameters:SetBinding* Options:Option*;

abstract Quantifier;

UniversalQuantifier : Quantifier;

ExistentialQuantifier : Quantifier;

// Literal expressions
abstract Literal : Expression ::= <Value:String>;

NumberLiteral : Literal;

BitvectorLiteral : Literal;

StringLiteral : Literal;

BooleanLiteral : Literal;

RealLiteral : Literal;

// Statements
abstract Statement;

AssertStatement : Statement ::= Expression:Expression;

AssumeStatement : Statement ::= Expression:Expression;

HavocStatement : Statement ::= References:SymbolicReference*;

AssignmentStatement : Statement ::= Targets:Assignee* Source:Expression*;

Assignee ::= Reference:ValueReference;

MapAssignee : Assignee ::= MapSelect;

abstract CallStatement : Statement ::= Accessor:Accessor;

TargetedCallStatement : CallStatement ::= Targets:SymbolicReference* Arguments:Expression*;

UniversalCallStatement : CallStatement ::= Arguments:Meta*;

IfStatement : Statement ::= Condition:Meta Then:BlockStatement [Else:BlockStatement];

WhileStatement : Statement ::= Condition:Meta Statement Invariants:LoopInvariant*;

BreakStatement : Statement ::= [Target:Label];

ReturnStatement : Statement;

BlockStatement : Statement ::= Statement*;

GotoStatement : Statement ::= Label;

LabelStatement : Statement ::= Label;

Label ::= <Target:String>;

// Specifications
abstract Specification ::= <Free:Boolean>;

PreCondition : Specification ::= Expression:Expression;

PostCondition : Specification ::= Expression:Expression;

FrameCondition : Specification ::= References:ValueReference*;

LoopInvariant : Specification ::= Expression:Expression;
