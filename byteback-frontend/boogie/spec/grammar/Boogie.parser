%goal program;

Program program
    = declaration_list.dl?
      {: return new Program(dl); :}
    ;

List declaration_list
    = declaration.d
      {: return new List(d); :}
    | declaration_list.dl declaration.d
      {: return dl.add(d); :}
    ;

Declaration declaration
    = type_declaration
    //| constant_declaration
    //| function_declaration
    //| axiom_declaration
    //| variable_declaration
    //| procedure_declaration
    //| implementation_declaration
    ;

TypeDeclaration type_declaration
    = TYPE attribute_list.al? type_definition.td {: td.setAttributesList(al); :}
    ;

TypeDeclaration type_definition
    = type_constructor_definition
    | type_synonym_definition
    ;

TypeConstructor type_constructor_definition
    = FINITE.f? IDENTIFIER.tn type_argument_list.tal? SEMICOLON
      {: return new TypeConstructor(tn, null, tal, FINITE.f != null); :}
    ;

TypeSynonym type_synonym_definition
    = IDENTIFIER.ta type_argument_list.tal EQUALS IDENTIFIER.tb SEMICOLON
      {: return new TypeSynonym(ta, null, tal, tb); :}
    ;

List type_argument_list
    = type_argument.ta
      {: return new List(ta); :}
    | type_argument_list.tal type_argument.ta
      {: return tal.add(ta); :}
    ;

TypeArgument type_argument
    = IDENTIFIER.an
      {: return new TypeArgument(an); :}
    ;

List attribute_list
    = attribute.a
      {: return new List(a); :}
    | attribute_list.al attribute.a
      {: return al.add(a); :}
    ;

Attribute attribute
    = LBRACE DOUBLE_COLON IDENTIFIER.a expression_list.el RBRACE
      {: return new Attribute(a, el); :}
    ;

List expression_list
    = expression.e
      {: return new List(e); :}
    | expression_list.el COMMA expression.e
      {: return el.add(e); :}
    ;

Expression expression
    = PLACEHOLDER
    ;
