Option option
    = attribute
    | trigger
    ;

List option_list
    = option.o
    {: return new List(o); :}
    | option_list.ol option.o
    {: return ol.add(o); :}
    ;

Trigger trigger
    = LBRACE expression_comma_list.el RBRACE
    {: return new Trigger(el); :}
    ;

Attribute attribute
    = LBRACE COLON ID.i expression_comma_list.el? RBRACE
    {: return new Attribute(i, el); :}
    ;

List attribute_list
    = attribute.a
    {: return new List(a); :}
    | attribute_list.al attribute.a
    {: return al.add(a); :}
    ;

Declaration declaration
    = type_declaration
    | constant_declaration
    | axiom_declaration
    | function_declaration
    | variable_declaration
    ;

List declaration_list
    = declaration.d
    {: return new List(d); :}
    | declaration_list.dl declaration.d
    {: return dl.add(d); :}
    ;

TypeDeclaration type_declaration
    = TYPE attribute_list.al? type_definition.td SEMICOLON
    {:
       td.setAttributesList(al);
       return td;
    :}
    ;

TypeDeclaration type_definition
    = type_constructor_definition
    | finite_type_constructor_definition
    | type_synonym_definition
    ;

TypeConstructor finite_type_constructor_definition
    = FINITE type_constructor_definition.d
    {:
       d.setFinite(true);
       return d;
    :}
    ;

TypeConstructor type_constructor_definition
    = declarator.d declarator_list.dl?
    {: return new TypeConstructor(new List(), d, dl, false); :}
    ;

TypeSynonym type_synonym_definition
    = declarator.d declarator_list.dl EQUALS type.t
    {: return new TypeSynonym(new List(), d, dl, t); :}
    ;

ConstantDeclaration constant_declaration
    = CONST attribute_list.al constant_definition.cd SEMICOLON
    {:
       cd.setAttributesList(al);
       return cd;
    :}
    ;

ConstantDeclaration constant_definition
    = standard_constant_definition
    | unique_constant_definition
    ;

ConstantDeclaration standard_constant_definition
    = multi_binding.b order_specification.os
    {: return new ConstantDeclaration(new List(), b, false, os); :}
    ;

ConstantDeclaration unique_constant_definition
    = UNIQUE standard_constant_definition.cd
    {:
       cd.setUnique(true);
       return cd;
    :}
    ;

OrderSpecification order_specification
    = standard_order_specification
    | complete_order_specification
    ;

OrderSpecification standard_order_specification
    = parent_info.os
    ;

OrderSpecification complete_order_specification
    = standard_order_specification.os COMPLETE
    {:
       os.setComplete(true);
       return os;
    :}
    ;

OrderSpecification parent_info
    = PARTORDER parent_edge_comma_list.pl
    {: return new OrderSpecification(pl, false); :}
    ;

ParentEdge parent_edge
    = standard_parent_edge
    | unique_parent_edge
    ;

ParentEdge unique_parent_edge
    = UNIQUE standard_parent_edge.e
    {:
       e.setUnique(true);
       return e;
    :}
    ;

ParentEdge standard_parent_edge
    = accessor.a
    {: return new ParentEdge(a, false); :}
    ;

List parent_edge_comma_list
    = parent_edge.e
    {: return new List(e); :}
    | parent_edge_comma_list.el COMMA parent_edge.e
    {: return el.add(e); :}
    ;

AxiomDeclaration axiom_declaration
    = AXIOM attribute_list.al expression.e
    {: return new AxiomDeclaration(al, e); :}
    ;

FunctionDeclaration function_declaration
    = FUNCTION attribute_list.al declarator.d function_definition.fd
    {:
       fd.setAttributesList(al);
       fd.setDeclarator(d);
       return fd;
    :}
    ;

FunctionDeclaration function_definition
    = function_prototype SEMICOLON
    | function_body
    ;

FunctionDeclaration function_body
    = function_prototype.f LBRACE expression.e RBRACE
    {:
       f.setExpression(e);
       return e;
    :}
    ;

FunctionDeclaration function_prototype
    = function_signature.fs
    {: return new FunctionDeclaration(new List(), null, fs, new Opt()); :}
    ;

FunctionSignature function_signature
    = type_variable_block_list.dl? LPAREN optional_binding_comma_list.bl RPAREN RETURNS LPAREN optional_binding.b RPAREN
    {: return new FunctionSignature(dl, bl, b); :}
    ;

VariableDeclaration variable_declaration
    = VAR attribute_list.al bounded_binding_comma_list.bl SEMICOLON
    {: return new VariableDeclaration(al, bl); :}
    ;