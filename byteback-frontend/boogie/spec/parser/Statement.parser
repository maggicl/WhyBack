Body body
    = variable_declaration_list.dl? statement_list.sl?
    {: return new Body(dl, sl); :}
    ;

List body_list
    = body_block.b
    {: return new List(b); :}
    | body_list.bl body_block.b
    {: return bl.add(b); :}
    ;

List variable_declaration_list
    = variable_declaration.d
    {: return new List(d); :}
    | variable_declaration_list.dl variable_declaration.d
    {: return dl.add(d); :}
    ;

Body body_block
    = LBRACE body.b RBRACE
    {: return b; :}
    ;

Statement statement
    = unit_statement.s SEMICOLON
    {: return s; :}
    | label_statement.s
    {: return s; :}
    | group_statement.s
    {: return s; :}
    ;

List statement_list
    = statement.s
    {: return new List(s); :}
    | statement_list.sl statement.s
    {: return sl.add(s); :}
    ;

LabelStatement label_statement
    = label.l COLON
    {: return new LabelStatement(l); :}
    ;

Label label
    = ID.n
    {: return new Label(n); :}
    ;

Statement group_statement
    = block_statement.s
    {: return s; :}
    | if_statement.s
    {: return s; :}
    | while_statement.s
    {: return s; :}
    ;

WhileStatement while_statement
    = WHILE LPAREN meta.m RPAREN loop_invariant_list.il? block_statement.b
    {: return new WhileStatement(m, b, il); :}
    ;

List loop_invariant_list
    = loop_invariant.i
    {: return new List(i); :}
    | loop_invariant_list.il loop_invariant.i
    {: return il.add(i); :}
    ;

LoopInvariant loop_invariant
    = standard_loop_invariant.c
    {: return c; :}
    | free_loop_invariant.c
    {: return c; :}
    ;

LoopInvariant free_loop_invariant
    = FREE standard_loop_invariant.i
    {:
       i.setFree(true);
       return i;
    :}
    ;

LoopInvariant standard_loop_invariant
    = INVARIANT expression.e SEMICOLON
    {: return new LoopInvariant(false, e); :}
    ;

IfStatement if_statement
    = IF LPAREN meta.m RPAREN block_statement.b else_block.eb?
    {: return new IfStatement(m, b, eb); :}
    ;

BlockStatement else_block
    = ELSE block_statement.s
    {: return s; :}
    | ELSE if_statement.s
    {: return s; :}
    ;

BlockStatement block_statement
    = LBRACE statement_list.sl RBRACE
    {: return new BlockStatement(sl); :}
    ;

Statement unit_statement
    = assert_statement
    | assume_statement
    | havoc_statement
    | assignment_statement
    | call_statement
    | break_statement
    | return_statement
    | goto_statement
    ;

AssertStatement assert_statement
    = ASSERT expression.e
    {: return new AssertStatement(e); :}
    ;

AssumeStatement assume_statement
    = ASSUME expression.e
    {: return new AssumeStatement(e); :}
    ;

HavocStatement havoc_statement
    = HAVOC value_reference_comma_list.sl
    {: return new HavocStatement(sl); :}
    ;

List value_reference_comma_list
    = value_reference.r
    {: return new List(r); :}
    | value_reference_comma_list.rl COMMA value_reference.r
    {: return rl.add(r); :}
    ;

AssignmentStatement assignment_statement
    = assignee_comma_list.al COLONEQ expression_comma_list.el
    {: return new AssignmentStatement(al, el); :}
    ;

Assignee assignee
    = value_assignee
    | map_assignee
    ;

Assignee value_assignee
    = value_reference.r 
    {: return new Assignee(r); :}
    ;

List value_assignee_comma_list
    = value_assignee.a
    {: return new List(a); :}
    | value_assignee_comma_list.al COMMA value_assignee.a
    {: return al.add(a); :}
    ;

MapAssignee map_assignee
    = value_reference.r map_select.s
    {: return new MapAssignee(r, s); :}
    ;

MapSelect map_select
    = LBRACKET expression_comma_list.el RBRACKET
    {: return new MapSelect(el); :}
    ;

List assignee_comma_list
    = assignee.a
    {: return new List(a); :}
    | assignee_comma_list.al COMMA assignee.a
    {: return al.add(a); :}
    ;

CallStatement call_statement
    = targeted_call_statement
    | universal_call_statement
    ;

TargetedCallStatement targeted_call_statement
    = CALL value_assignee_comma_list.asl COLONEQ accessor.a LPAREN expression_comma_list.el RPAREN
    {: return new TargetedCallStatement(a, asl, el); :}
    ;

UniversalCallStatement universal_call_statement
    = CALL FORALL accessor.a LPAREN meta_comma_list.ml RPAREN
    {: return new UniversalCallStatement(a, ml); :}
    ;

BreakStatement break_statement
    = BREAK label.l?
    {: return new BreakStatement(l); :}
    ;

ReturnStatement return_statement
    = RETURN
    {: return new ReturnStatement(); :}
    ;

GotoStatement goto_statement
    = GOTO label.l
    {: return new GotoStatement(l); :}
    ;