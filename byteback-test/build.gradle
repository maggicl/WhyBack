subprojects { test ->

		def cli = project(':byteback-cli')

		def bytebackRoot = cli.installDist.destinationDir

		def system = tasks.register('system') {
				def sourceDirs = project.sourceSets.main.allSource.srcDirs
				def targetProperty = project.findProperty("TARGET")

				def execute = { target ->
						test.exec {
								environment 'BYTEBACK_ROOT', bytebackRoot
								environment 'TEST_JAR', project.shadowJar.archivePath
								commandLine 'lit', target, '-a', '-j', 4
						}
				}

				doLast {
						sourceDirs.each { dir ->
								if (targetProperty == null) {
										if ((dir.getName().equals("java") || dir.getName().equals("scala")) && dir.exists()) {
												execute(dir)
										}
								} else {
										execute(targetProperty)
								}
						}
				}

				dependsOn cli.installDist
				dependsOn test.shadowJar
		}

		def benchmark = tasks.register('benchmark') {
				def script = "../benchmark.py"
				def jar = test.shadowJar.archivePath
				def sourceDirs = test.sourceSets.main.allSource.srcDirs

				doLast {
						sourceDirs.each { dir ->
								test.exec {
										def source = dir.getName()
										def benchmark = "./benchmark/$source"
										def output = "$benchmark/results.csv"
										def tmp = "$benchmark/tmp"
										environment 'BYTEBACK_ROOT', bytebackRoot
										project.mkdir(benchmark)
										project.mkdir(tmp)

										commandLine 'python', script, '--jar', jar,
												'--source', dir, '--output', output, '--temp', tmp,
												'--extension', source, '--repetitions', 5,
												'--infer-filter', '.*java17.*Summary.java|.*java8.*EnhancedFor.java'
								}
						}
				}

				dependsOn cli.installDist
				dependsOn test.shadowJar
		}

}

