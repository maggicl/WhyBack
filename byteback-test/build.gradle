import java.nio.file.Paths

def bytebackTestRoot = project(':byteback-test').projectDir

def cli = project(':byteback-cli')

subprojects { test ->
    def bytebackRoot = cli.installDist.destinationDir

    tasks.register('system') {
        dependsOn test.clean

        def sourceSet = project.sourceSets.main
        def sourceDirs = sourceSet.allSource.srcDirs
        def testDirs = ["java", "scala", "kotlin"]
        def targetProperty = project.findProperty("TEST_TARGET")
        def jobsProperty = project.findProperty("TEST_JOBS") ?: "4"

        def execute = { target ->
            exec {
                environment('BYTEBACK_ROOT', bytebackRoot)
                environment('TEST_JAR', project.shadowJar.archivePath)
                commandLine 'lit', target, '-a', '-j', jobsProperty
            }
        }

        doLast {
            sourceDirs.each { dir ->
                def absPath = dir.toPath().toAbsolutePath().toString()

                // last condition is to make sure that for 'test-kotlin-...' and 'test-scala-...' the 'kotlin' and 'scala'
                // respective source directories are used
                if (testDirs.contains(dir.getName()) && dir.exists() && absPath.contains("-${dir.getName()}-")) {
                    if (targetProperty) {
                        def targetPath = Paths.get(bytebackTestRoot.getCanonicalPath(), targetProperty.toString()).normalize()
                        if (targetPath.startsWith(test.projectDir.getCanonicalPath())) {
                            execute(targetPath)
                        }
                    } else {
                        execute(dir)
                    }
                }
            }
        }

        dependsOn cli.installDist
        dependsOn test.shadowJar
    }
}