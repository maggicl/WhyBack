subprojects { test ->

		def cli = project(':byteback-cli')

		def bytebackRoot = cli.installDist.destinationDir

		def system = tasks.register('system') {
				def sourceSet = project.sourceSets.main
				def sourceDirs = sourceSet.allSource.srcDirs
				def compiledDirs = sourceSet.output.classesDirs
				def compiledDir = null
				def sourceDir = null
				def targetProperty = project.findProperty("TARGET")

				def summaryDir = "./summary"
				project.mkdir(summaryDir)

				compiledDirs.each { dir -> if (dir.exists()) compiledDir = dir }

				def execute = { target ->
						test.exec {
								environment 'SUMMARY', summaryDir
								environment 'SRC_BASE', sourceDir
								environment 'CLASS_BASE', compiledDir
								environment 'BYTEBACK_ROOT', bytebackRoot
								environment 'TEST_JAR', project.shadowJar.archivePath
								commandLine 'lit', target, '-a', '-j', 4
						}
				}

				doLast {
						sourceDirs.each { dir ->
								if ((dir.getName().equals("java") || dir.getName().equals("scala") || dir.getName().equals("kotlin"))
										&& dir.exists()) {
										sourceDir = dir
								}

								if (sourceDir != null) {
										if (targetProperty == null) {
												execute(sourceDir)
										} else {
												execute(targetProperty)
										}
								}
						}
				}

				dependsOn cli.installDist
				dependsOn test.shadowJar

				outputs.files fileTree(summaryDir).matching {
						include '*.csv'
				} 

		}

		def benchmark = tasks.register('benchmark') {
				def script = "../benchmark.py"
				def jar = test.shadowJar.archivePath
				def sourceDirs = test.sourceSets.main.allSource.srcDirs
				def benchmarkDir = "./benchmark"

				doLast {
						sourceDirs.each { dir ->
								test.exec {
										def source = dir.getName()
										def output = "./benchmark/benchmark.csv"
										environment 'BYTEBACK_ROOT', bytebackRoot
										project.mkdir(benchmarkDir)
										commandLine 'python', script, '--output', output, '--repetitions', 1, '--summary'	, './summary/summary.csv'
								}
						}
				}

				dependsOn test.system

				outputs.files fileTree(benchmarkDir).matching {
						include '*.csv'
				} 
		}

}

def experiment = tasks.register('experiment') {

		doLast {
				project.exec {
						commandLine 'sh' 'format-experiments.sh' 
				}
		}

		subprojects { test ->
				dependsOn test.benchmark
		}
		
}
