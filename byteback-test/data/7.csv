kind,goal
cfg,byteback.test.algorithm.ArrayReverse.<init>()V
cfg,byteback.test.algorithm.ArrayReverse.<init>()V
cfg,byteback.test.algorithm.ArrayReverse.<init>()V
cfg,byteback.test.algorithm.BinarySearch.<init>()V
cfg,byteback.test.algorithm.Counter.<init>()V
cfg,byteback.test.algorithm.Counter.increment()V
cfg,byteback.test.algorithm.Counter.setCount(I)V
cfg,byteback.test.algorithm.DoubleInsertionSort.<init>()V
cfg,byteback.test.algorithm.DoubleMax.<init>()V
cfg,byteback.test.algorithm.DoubleSelectionSort.<init>()V
cfg,byteback.test.algorithm.DoubleSum.<init>()V
cfg,byteback.test.algorithm.GCD.<init>()V
cfg,byteback.test.algorithm.GCD.<init>()V
cfg,byteback.test.algorithm.GCD.<init>()V
cfg,byteback.test.algorithm.IntegerInsertionSort.<init>()V
cfg,byteback.test.algorithm.IntegerMax.<init>()V
cfg,byteback.test.algorithm.IntegerSelectionSort.<init>()V
cfg,byteback.test.algorithm.IntegerSum.<init>()V
cfg,byteback.test.algorithm.LinearSearch.<init>()V
cfg,byteback.test.algorithm.LinearSearch.<init>()V
cfg,byteback.test.algorithm.LinearSearch.<init>()V
cfg,byteback.test.algorithm.SquareSortedArray.<init>()V
cfg,byteback.test.array.Basic.<init>()V
cfg,byteback.test.array.Basic.literals()V
cfg,byteback.test.casting.BoolToInt.<init>()V
cfg,byteback.test.casting.IntToReal.<init>()V
cfg,byteback.test.casting.RealToInt.<init>()V
cfg,byteback.test.controlflow.Basic$_anonfun_emptyFor_1__1.apply$mcVI$sp(I)V
cfg,byteback.test.controlflow.Basic$_anonfun_emptyFor_1__1.bootstrap$()LScala.Runtime.Java8.JFunction1$mcVI$sp;
cfg,byteback.test.controlflow.Basic.$deserializeLambda$(LJava.Lang.Invoke.SerializedLambda;)LJava.Lang.Object;
cfg,byteback.test.controlflow.Basic.<init>()V
cfg,byteback.test.controlflow.Basic.<init>()V
cfg,byteback.test.controlflow.Basic.<init>()V
cfg,byteback.test.controlflow.Basic.assignsProcedureResult()V
cfg,byteback.test.controlflow.Basic.assignsProcedureResultTwice()V
cfg,byteback.test.controlflow.Basic.callsInForLoop()V
cfg,byteback.test.controlflow.Basic.callsVoidProcedure()V
cfg,byteback.test.controlflow.Basic.emptyDoWhile(Z)V
cfg,byteback.test.controlflow.Basic.emptyDoWhile(Z)V
cfg,byteback.test.controlflow.Basic.emptyWhile(Z)V
cfg,byteback.test.controlflow.Basic.emptyWhile(Z)V
cfg,byteback.test.controlflow.EnhancedFor.<init>()V
cfg,byteback.test.controlflow.Switch.<init>()V
cfg,byteback.test.examples.ReadResource$Resource.<init>()V
cfg,byteback.test.examples.ReadResource$Resource.close()V
cfg,byteback.test.examples.ReadResource.<init>()V
cfg,byteback.test.examples.Summary.<init>()V
cfg,byteback.test.exceptions.A.<init>()V
cfg,byteback.test.exceptions.A.<init>()V
cfg,byteback.test.exceptions.A.method()V
cfg,byteback.test.exceptions.A.method()V
cfg,byteback.test.exceptions.Basic$Exception4.<init>()V
cfg,byteback.test.exceptions.Basic$Exception4.<init>()V
cfg,byteback.test.exceptions.Basic.<init>()V
cfg,byteback.test.exceptions.Basic.<init>()V
cfg,byteback.test.exceptions.Basic.<init>(I)V
cfg,byteback.test.exceptions.Basic.alwaysCatches()V
cfg,byteback.test.exceptions.Basic.alwaysCatches()V
cfg,byteback.test.exceptions.Basic.alwaysThrows()V
cfg,byteback.test.exceptions.Basic.alwaysThrows()V
cfg,byteback.test.exceptions.Basic.alwaysThrows()V
cfg,byteback.test.exceptions.Basic.callsAlwaysThrows()V
cfg,byteback.test.exceptions.Basic.callsAlwaysThrows()V
cfg,byteback.test.exceptions.Basic.callsAlwaysThrows()V
cfg,byteback.test.exceptions.Basic.neverCatches()V
cfg,byteback.test.exceptions.Basic.neverCatches()V
cfg,byteback.test.exceptions.Basic.neverCatches()V
cfg,byteback.test.exceptions.Basic.neverThrows()V
cfg,byteback.test.exceptions.Basic.neverThrows()V
cfg,byteback.test.exceptions.Basic.neverThrows()V
cfg,byteback.test.exceptions.Basic.throwsIfEven(I)V
cfg,byteback.test.exceptions.Basic.throwsIfEven(I)V
cfg,byteback.test.exceptions.Basic.throwsIfEven(I)V
cfg,byteback.test.exceptions.Basic.tryCatchBlock()LJava.Lang.Exception;
cfg,byteback.test.exceptions.Basic.tryCatchBlock()LJava.Lang.Exception;
cfg,byteback.test.exceptions.Basic.tryCatchBlock()V
cfg,byteback.test.exceptions.Exception1.<init>()V
cfg,byteback.test.exceptions.Exception1.<init>()V
cfg,byteback.test.exceptions.Exception1.<init>()V
cfg,byteback.test.exceptions.Exception1.<init>()V
cfg,byteback.test.exceptions.Exception1.<init>()V
cfg,byteback.test.exceptions.Exception1.<init>()V
cfg,byteback.test.exceptions.Exception1.<init>()V
cfg,byteback.test.exceptions.Exception1.<init>()V
cfg,byteback.test.exceptions.Exception1.<init>()V
cfg,byteback.test.exceptions.Exception2.<init>()V
cfg,byteback.test.exceptions.Exception2.<init>()V
cfg,byteback.test.exceptions.Exception2.<init>()V
cfg,byteback.test.exceptions.Exception2.<init>()V
cfg,byteback.test.exceptions.Exception2.<init>()V
cfg,byteback.test.exceptions.Exception2.<init>()V
cfg,byteback.test.exceptions.Exception2.<init>()V
cfg,byteback.test.exceptions.Exception2.<init>()V
cfg,byteback.test.exceptions.Exception2.<init>()V
cfg,byteback.test.exceptions.Exception3.<init>()V
cfg,byteback.test.exceptions.Exception3.<init>()V
cfg,byteback.test.exceptions.Exception3.<init>()V
cfg,byteback.test.exceptions.Exception3.<init>()V
cfg,byteback.test.exceptions.Exception4.<init>()V
cfg,byteback.test.exceptions.Exception4.<init>()V
cfg,byteback.test.exceptions.Loop.<init>()V
cfg,byteback.test.exceptions.Loop.alwaysThrows1()V
cfg,byteback.test.exceptions.Loop.doesNotThrowInFor()V
cfg,byteback.test.exceptions.MultiCatch.<init>()V
cfg,byteback.test.exceptions.MultiCatch.<init>()V
cfg,byteback.test.exceptions.MultiCatch.alwaysThrowsMultiple()V
cfg,byteback.test.exceptions.MultiCatch.alwaysThrowsMultiple()V
cfg,byteback.test.exceptions.MultiCatch.emptyMulticatch()V
cfg,byteback.test.exceptions.MultiCatch.emptyMulticatch()V
cfg,byteback.test.exceptions.MultiCatch.multiCatchUnion()V
cfg,byteback.test.exceptions.PotentialIndexOutOfBounds.<init>()V
cfg,byteback.test.exceptions.PotentialIndexOutOfBounds.<init>()V
cfg,byteback.test.exceptions.PotentialIndexOutOfBounds.<init>()V
cfg,byteback.test.exceptions.PotentialIndexOutOfBounds.constrainedTarget(RI)V
cfg,byteback.test.exceptions.PotentialIndexOutOfBounds.passedIndex(I)V
cfg,byteback.test.exceptions.PotentialIndexOutOfBounds.passedIndex(I)V
cfg,byteback.test.exceptions.PotentialIndexOutOfBounds.passedIndex(I)V
cfg,byteback.test.exceptions.PotentialNullDereference$A.<init>()V
cfg,byteback.test.exceptions.PotentialNullDereference$A.method()V
cfg,byteback.test.exceptions.PotentialNullDereference.<init>()V
cfg,byteback.test.exceptions.PotentialNullDereference.<init>()V
cfg,byteback.test.exceptions.PotentialNullDereference.<init>()V
cfg,byteback.test.exceptions.PotentialNullDereference.constrainedPassedArrayTarget(RI)V
cfg,byteback.test.exceptions.PotentialNullDereference.constrainedPassedArrayTarget(RI)V
cfg,byteback.test.exceptions.PotentialNullDereference.freshArrayTarget()V
cfg,byteback.test.exceptions.PotentialNullDereference.freshTarget()V
cfg,byteback.test.exceptions.PotentialNullDereference.freshTarget()V
cfg,byteback.test.exceptions.PotentialNullDereference.freshTarget()V
cfg,byteback.test.exceptions.PotentialNullDereference.passedArrayTarget(RI)V
cfg,byteback.test.exceptions.PotentialNullDereference.passedArrayTarget(RI)V
cfg,byteback.test.exceptions.PotentialNullDereference.passedArrayTarget(RLByteback.Test.Exceptions.A;)V
cfg,byteback.test.exceptions.PotentialNullDereference.passedTarget(LByteback.Test.Exceptions.A;)V
cfg,byteback.test.exceptions.PotentialNullDereference.passedTarget(LByteback.Test.Exceptions.A;)V
cfg,byteback.test.exceptions.PotentialNullDereference.passedTarget(LByteback.Test.Exceptions.PotentialNullDereference$A;)V
cfg,byteback.test.exceptions.TryFinally.<init>()V
cfg,byteback.test.exceptions.TryFinally.<init>()V
cfg,byteback.test.exceptions.TryFinally.<init>()V
cfg,byteback.test.exceptions.TryFinally.alwaysThrows1()V
cfg,byteback.test.exceptions.TryFinally.alwaysThrows1()V
cfg,byteback.test.exceptions.TryFinally.alwaysThrows1()V
cfg,byteback.test.exceptions.TryFinally.catchFinallyBlock()V
cfg,byteback.test.exceptions.TryFinally.finallyBlock()V
cfg,byteback.test.exceptions.TryFinally.finallyIsExecuted()V
cfg,byteback.test.exceptions.TryFinally.finallyIsExecuted()V
cfg,byteback.test.exceptions.TryFinally.finallyOverrides1NestedFinally()I
cfg,byteback.test.exceptions.TryFinally.finallyOverrides2NestedFinally()I
cfg,byteback.test.exceptions.TryFinally.finallyOverridesThrows()I
cfg,byteback.test.exceptions.TryFinally.unreachableCatch()V
cfg,byteback.test.exceptions.TryWithResources$Resource.<init>(LByteback.Test.Exceptions.TryWithResources;)V
cfg,byteback.test.exceptions.TryWithResources$Resource.close()V
cfg,byteback.test.exceptions.TryWithResources.<init>()V
cfg,byteback.test.exceptions.TryWithResources.<init>()V
cfg,byteback.test.exceptions.TryWithResources.emptyTryWithResources()V
cfg,byteback.test.generics.List.<init>(LJava.Lang.Object;)V
cfg,byteback.test.instance.Comparator$DefaultComparator.<init>()V
cfg,byteback.test.instance.Comparator$GreaterThanComparator.<init>()V
cfg,byteback.test.instance.Comparator$GreaterThanComparator.compare(II)Z
cfg,byteback.test.instance.Comparator$LessThanComparator.<init>()V
cfg,byteback.test.instance.Comparator$LessThanComparator.compare(II)Z
cfg,byteback.test.instance.Comparator.<init>()V
cfg,byteback.test.instance.Counter.<init>()V
cfg,byteback.test.instance.Counter.<init>()V
cfg,byteback.test.instance.Counter.count_$eq(I)V
cfg,byteback.test.instance.Counter.increment()V
cfg,byteback.test.instance.Counter.increment()V
cfg,byteback.test.instance.Counter.main()V
cfg,byteback.test.instance.DefaultComparator.<init>()V
cfg,byteback.test.instance.Dice$FixedDie.<init>()V
cfg,byteback.test.instance.Dice.<init>()V
cfg,byteback.test.instance.Dice.<init>()V
cfg,byteback.test.instance.Dice.main()V
cfg,byteback.test.instance.Dice.main()V
cfg,byteback.test.instance.Die.<init>()V
cfg,byteback.test.instance.FieldAccess.<init>()V
cfg,byteback.test.instance.FixedDie.<init>()V
cfg,byteback.test.instance.GreaterThanComparator.<init>()V
cfg,byteback.test.instance.GreaterThanComparator.compare(II)Z
cfg,byteback.test.instance.InstanceField.<init>()V
cfg,byteback.test.instance.LessThanComparator.<init>()V
cfg,byteback.test.instance.LessThanComparator.compare(II)Z
cfg,byteback.test.instance.StaticField.<init>()V
cfg,byteback.test.instance.StaticField.initialize()V
cfg,byteback.test.instance.StaticInitializer.<clinit>()V
cfg,byteback.test.instance.StaticInitializer.<init>()V
cfg,byteback.test.instance.Supported.<init>()V
cfg,byteback.test.instance.Unit.<init>()V
cfg,byteback.test.instance.Unit.<init>()V
cfg,byteback.test.library.java.util.AbstractCollection.<init>()V
cfg,byteback.test.library.java.util.AbstractCollection.add(LJava.Lang.Object;)Z
cfg,byteback.test.library.java.util.AbstractCollection.isEmpty()Z
cfg,byteback.test.library.java.util.AbstractList.<init>()V
cfg,byteback.test.library.java.util.AbstractList.add(ILJava.Lang.Object;)V
cfg,byteback.test.library.java.util.AbstractList.add(LJava.Lang.Object;)Z
cfg,byteback.test.library.java.util.AbstractList.clear()V
cfg,byteback.test.library.java.util.AbstractList.listIterator()LJava.Util.ListIterator;
cfg,byteback.test.library.java.util.AbstractList.outOfBoundsMsg(I)LJava.Lang.String;
cfg,byteback.test.library.java.util.ArrayList$ArrayListSpliterator.<init>(LByteback.Test.Library.Java.Util.ArrayList;III)V
cfg,byteback.test.library.java.util.ArrayList$ArrayListSpliterator.estimateSize()J
cfg,byteback.test.library.java.util.ArrayList$ArrayListSpliterator.getFence()I
cfg,byteback.test.library.java.util.ArrayList$ArrayListSpliterator.trySplit()LJava.Util.Spliterator;
cfg,byteback.test.library.java.util.ArrayList$Itr.<init>(LByteback.Test.Library.Java.Util.ArrayList;)V
cfg,byteback.test.library.java.util.ArrayList$Itr.checkForComodification()V
cfg,byteback.test.library.java.util.ArrayList$ListItr.<init>(LByteback.Test.Library.Java.Util.ArrayList;I)V
cfg,byteback.test.library.java.util.ArrayList$SubList$1.<init>(LByteback.Test.Library.Java.Util.ArrayList$SubList;II)V
cfg,byteback.test.library.java.util.ArrayList$SubList.addAll(LJava.Util.Collection;)Z
cfg,byteback.test.library.java.util.ArrayList$SubList.checkForComodification()V
cfg,byteback.test.library.java.util.ArrayList$SubList.outOfBoundsMsg(I)LJava.Lang.String;
cfg,byteback.test.library.java.util.ArrayList$SubList.size()I
cfg,byteback.test.library.java.util.ArrayList.<clinit>()V
cfg,byteback.test.library.java.util.ArrayList.<init>()V
cfg,byteback.test.library.java.util.ArrayList.add(LJava.Lang.Object;)Z
cfg,byteback.test.library.java.util.ArrayList.clear()V
cfg,byteback.test.library.java.util.ArrayList.contains(LJava.Lang.Object;)Z
cfg,byteback.test.library.java.util.ArrayList.ensureCapacity(I)V
cfg,byteback.test.library.java.util.ArrayList.ensureCapacityInternal(I)V
cfg,byteback.test.library.java.util.ArrayList.hugeCapacity(I)I
cfg,byteback.test.library.java.util.ArrayList.outOfBoundsMsg(I)LJava.Lang.String;
cfg,byteback.test.library.java.util.ArrayList.removeAll(LJava.Util.Collection;)Z
cfg,byteback.test.library.java.util.ArrayList.retainAll(LJava.Util.Collection;)Z
cfg,byteback.test.library.java.util.ArrayList.subListRangeCheck(III)V
cfg,byteback.test.library.java.util.LinkedList$LLSpliterator.<init>(LByteback.Test.Library.Java.Util.LinkedList;II)V
cfg,byteback.test.library.java.util.LinkedList$LLSpliterator.estimateSize()J
cfg,byteback.test.library.java.util.LinkedList$ListItr.set(LJava.Lang.Object;)V
cfg,byteback.test.library.java.util.LinkedList$Node.<init>(LByteback.Test.Library.Java.Util.LinkedList$Node;LJava.Lang.Object;LByteback.Test.Library.Java.Util.LinkedList$Node;)V
cfg,byteback.test.library.java.util.LinkedList.<init>()V
cfg,byteback.test.library.java.util.LinkedList.<init>(LJava.Util.Collection;)V
cfg,byteback.test.library.java.util.LinkedList.add(LJava.Lang.Object;)Z
cfg,byteback.test.library.java.util.LinkedList.addAll(LJava.Util.Collection;)Z
cfg,byteback.test.library.java.util.LinkedList.addFirst(LJava.Lang.Object;)V
cfg,byteback.test.library.java.util.LinkedList.addLast(LJava.Lang.Object;)V
cfg,byteback.test.library.java.util.LinkedList.contains(LJava.Lang.Object;)Z
cfg,byteback.test.library.java.util.LinkedList.element()LJava.Lang.Object;
cfg,byteback.test.library.java.util.LinkedList.isElementIndex(I)Z
cfg,byteback.test.library.java.util.LinkedList.isPositionIndex(I)Z
cfg,byteback.test.library.java.util.LinkedList.offer(LJava.Lang.Object;)Z
cfg,byteback.test.library.java.util.LinkedList.offerFirst(LJava.Lang.Object;)Z
cfg,byteback.test.library.java.util.LinkedList.offerLast(LJava.Lang.Object;)Z
cfg,byteback.test.library.java.util.LinkedList.outOfBoundsMsg(I)LJava.Lang.String;
cfg,byteback.test.library.java.util.LinkedList.pop()LJava.Lang.Object;
cfg,byteback.test.library.java.util.LinkedList.push(LJava.Lang.Object;)V
cfg,byteback.test.library.java.util.LinkedList.remove()LJava.Lang.Object;
cfg,byteback.test.library.java.util.LinkedList.removeFirstOccurrence(LJava.Lang.Object;)Z
cfg,byteback.test.operation.Boolean.<init>()V
cfg,byteback.test.operation.Boolean.shortCircuitingAnd(ZZ)Z
cfg,byteback.test.operation.Boolean.shortCircuitingNot(Z)Z
cfg,byteback.test.operation.Boolean.shortCircuitingOr(ZZ)Z
cfg,byteback.test.operation.Integer.<init>()V
cfg,byteback.test.operation.Real.<init>()V
cfg,byteback.test.operation.StaticCall.<init>()V
cfg,byteback.test.operation.StaticCall.callsProcedural()I
cfg,byteback.test.operation.VirtualCall.<init>()V
cfg,byteback.test.operation.VirtualCall.callsProcedural()LByteback.Test.Operation.VirtualCall;
cfg,byteback.test.operation.VirtualCall.callsPure()LByteback.Test.Operation.VirtualCall;
cfg,byteback.test.patternmatching.Basic.<init>()V
cfg,byteback.test.quantifier.Basic.<init>()V
cfg,byteback.test.switchexpression.Basic.<clinit>()V
cfg,byteback.test.switchexpression.Basic.<init>()V
cfg,byteback.test.typeinference.Basic.<init>()V
cfg,byteback.test.typeinference.Basic.inferReftypes()V
