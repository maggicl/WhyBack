# -*- Python -*-

import lit.util
import lit.formats
from lit import TestRunner
import os
import sys

# Patching the default lit substitution macros
get_default_substitutions = TestRunner.getDefaultSubstitutions


def get_patched_default_substitutions(test, tmpDir, tmpBase, normalize_slashes=False):
    substitutions = get_default_substitutions(test, tmpDir, tmpBase, normalize_slashes)
    source_path = test.getSourcePath()

    if source_path.endswith('.java'):
        qualified_path = source_path.split('.')[0].split(os.sep + 'java')[1]
        qualified_name = [x for x in qualified_path.split(os.sep) if x]

        substitutions.append(('%{class}', qualified_name[-1]))
        substitutions.append(('%{package}', '.'.join(qualified_name[:-1])))

    return substitutions


TestRunner.getDefaultSubstitutions = get_patched_default_substitutions

# Tests configuration
lit_config.note('using Python {}'.format(sys.version))

config.name = 'ByteBack'
config.test_format = lit.formats.ShTest(execute_external=False)
config.suffixes = ['.java']
config.test_source_root = os.path.dirname(os.path.abspath("./tests"))

dummy_root = os.path.abspath('./dummy')
dummy_java8 = os.path.join(dummy_root, "java8-all.jar")
dummy_java17 = os.path.join(dummy_root, "java17-all.jar")
dummy_scala = os.path.join(dummy_root, "scala-all.jar")

if 'JAVA_HOME' in os.environ:
    config.environment['JAVA_HOME'] = os.environ['JAVA_HOME']

config.substitutions.append(("%dummy_java8", dummy_java8));
config.substitutions.append(("%dummy_java17", dummy_java17));
config.substitutions.append(("%dummy_scala", dummy_scala));
#config.substitutions.append(("%byteback", byteback_executable))
