# -*- Python -*-

import lit.util
import lit.formats
from lit import TestRunner
from lit import Test
import os
import sys

# Do not return an error code for UNRESOLVED tests
Test.UNRESOLVED.isFailure = False

# Patching the default lit substitution macros
get_default_substitutions = TestRunner.getDefaultSubstitutions


def get_patched_default_substitutions(test, tmpDir, tmpBase, normalize_slashes=False):
    substitutions = get_default_substitutions(test, tmpDir, tmpBase, normalize_slashes)
    source_path = test.getSourcePath()

    if source_path.endswith('.java'):
        qualified_path = source_path.split('.')[0].split(os.sep + 'java')[1]
        qualified_name = [x for x in qualified_path.split(os.sep) if x]

        substitutions.append(('%{class}', '.'.join(qualified_name)))
        substitutions.append(('%{package}', '.'.join(qualified_name[:-1])))

    return substitutions


byteback_executable = os.getenv('BYTEBACK_ROOT') + "/bin/byteback-core"
test_jar = os.getenv('TEST_JAR')

TestRunner.getDefaultSubstitutions = get_patched_default_substitutions

# Tests configuration
lit_config.note('using Python {}'.format(sys.version))

config.name = 'ByteBack'
config.test_format = lit.formats.ShTest(execute_external=False)
config.suffixes = ['.java']
config.substitutions.append(("%{byteback}", byteback_executable))
config.substitutions.append(("%{jar}", test_jar))
config.substitutions.append(("%{byteback-all}", "%{byteback} -cp %{jar}"))
config.substitutions.append(("%{byteback-current}", "%{byteback-all} -c %{class}"))
config.substitutions.append(("%{byteback-convert}", "%{byteback-current} -o %s.actual.bpl"))
config.substitutions.append(("%{check-actual}", "diff %s.actual.bpl %s.expect.bpl"))
config.substitutions.append(("%{verify}", "boogie /timeLimit:20"))
config.substitutions.append(("%{verify-actual}", "%{verify} %s.actual.bpl"))

if 'JAVA_HOME' in os.environ:
    config.environment['JAVA_HOME'] = os.environ['JAVA_HOME']
