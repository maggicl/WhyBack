(** {Models the bootstrap java classes} *)
module Bootstrap
  use export prelude.exceptions.Exceptions
  use prelude.ptr.Ptr
  use prelude.typing.Type
  use prelude.heap.HeapDef
  use prelude.heap.Heap
  use string.String
  use map.Map

  scope Java
  scope Lang
  scope Object
    let constant class: Type.class = Type.root
  end
  end
  end

  scope Java
  scope Lang
  scope String
    (* the String class. This value is used for java.lang.String *)
    val constant class: Type.class

    type stringset = abstract {
      v: string -> Ptr.t
    } invariant {
      (forall s:string. v[s] <> Ptr.null) /\
      (forall s:string, s2:string. s <> s2 -> v[s] <> v[s2])
    }

    val pointers'8: stringset

    val literal'8 (s: string) : Ptr.t
      reads { pointers'8 }
      ensures { result = pointers'8.v[s] }
  end
  end
  end
end
