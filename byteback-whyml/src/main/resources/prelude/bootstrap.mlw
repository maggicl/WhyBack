(** {Models the bootstrap java classes} *)
module Bootstrap
  use export prelude.exceptions.Exceptions
  use prelude.ptr.Ptr
  use prelude.typing.Type
  use prelude.heap.HeapDef
  use prelude.heap.Heap
  use string.String
  use map.Map

  predicate other_same_strings (heap: Heap.t) (old_heap: t) (p: Ptr.t) =
      forall p'. p <> p' -> heap.strings[p'] = old_heap.strings[p']

  scope Java
  scope Lang
  scope Object
    val constant class: Type.class = Type.root
  end
  end
  end

  scope Java
  scope Lang
  scope String
    (* the String class. This value is used for java.lang.String *)
    val constant class: Type.class
  
    (* FIXME: same literals should map to the same ptr *)
    val literal'8 (ghost heap: Heap.t) (s: string) : Ptr.t
      writes { heap.strings }
      ensures { result <> Ptr.null && Heap.instanceof heap result (Class class) }
      ensures { heap.strings[result] = s }
      ensures { other_same_strings heap (old heap) result }
  end
  end
  end
end
