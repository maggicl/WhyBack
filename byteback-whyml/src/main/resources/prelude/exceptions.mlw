(** {Potentially Excepting Instruction exceptions} *)

(* This module is factored out from the bootstrap module to allow
   prelude.heap to depend on it *)
module Exceptions
  use prelude.typing.Type
  use prelude.ptr.Ptr

  (* exception JException Type.class *)

  scope Java
  scope Lang
  scope NullPointerException
    val constant class: class
  end
  
  scope ArrayIndexOutOfBoundsException
    val constant class: class
  end

  scope ArrayStoreException
    val constant class: class
  end

  scope NegativeArraySizeException
    val constant class: class
  end

  scope ClassCastException
    val constant class: class
  end
  end
  end

  predicate npe_if_null (e: Type.class) (p: Ptr.t) = p = Ptr.null && e = Java.Lang.NullPointerException.class
end

module Result
  use prelude.ptr.Ptr
  use prelude.machine.Operators

  type t 'r = Ok 'r | Exception Ptr.t

  predicate when_returns (r: t 'a) (clause: 'a -> bool) =
    match r with
      | Ok value -> (clause value)
      | Exception _ -> true
    end

  predicate must_return (r: t 'a) =
    match r with
      | Ok _ -> true
      | Exception _ -> false
    end

  predicate when_throws (r: t 'a) (clause: Ptr.t -> bool) =
    match r with
      | Ok _ -> true
      | Exception e -> clause e
    end
end
