(** {Potentially Excepting Instruction exceptions} *)

(* This module is factored out from the bootstrap module to allow
   prelude.heap to depend on it *)
module Exceptions
  use prelude.typing.Type
  use prelude.ptr.Ptr

  (* exception JException Type.class *)

  scope Java
  scope Lang
  scope NullPointerException
    val constant class: class
  end
  
  scope ArrayIndexOutOfBoundsException
    val constant class: class
  end

  scope ArrayStoreException
    val constant class: class
  end

  scope NegativeArraySizeException
    val constant class: class
  end

  scope ClassCastException
    val constant class: class
  end
  end
  end

  predicate npe_if_null (e: Type.class) (p: Ptr.t) = p = Ptr.null && e = Java.Lang.NullPointerException.class
end

module Throw
  use prelude.ptr.Ptr

  let ref caughtexception: Ptr.t = Ptr.null

  val jthrow (exc: Ptr.t) : 'a
    writes { caughtexception }
    ensures { caughtexception = exc }
end
