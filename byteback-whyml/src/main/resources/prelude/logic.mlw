(* hack to enable logic connectors in program functions *)
(* note the use of '.' to differentiate with the default operators. As '.' has priority 4, it does not affect the
   operator precedence *)

module Operators
  use bool.Bool
  use prelude.heap.Heap
  use prelude.ptr.Ptr
  use prelude.machine.Operators

  val function (->.) (a: bool) (b: bool) : bool
    ensures { result = a -> b }

  val function (<->.) (a: bool) (b: bool) : bool
    ensures { result = a <-> b }

  val function (/\.) (a: bool) (b: bool) : bool
    ensures { result = a /\ b }

  val function (\/.) (a: bool) (b: bool) : bool
    ensures { result = a \/ b }

  val function q_forall (heap: Heap.t) (clause: Heap.t -> 'a -> bool) : bool
    ensures { result = forall x. (clause heap x) }

  val function q_exists (heap: Heap.t) (clause: Heap.t -> 'a -> bool) : bool
    ensures { result = exists x. (clause heap x) }

  scope ZCMP
    let function eq [@inline:trivial] (x y: jbool) : jbool = not (xorb x y)
    let function ne [@inline:trivial] (x y: jbool) : jbool = xorb x y
  end
end
