module Operators
  (* importing machine types *)
  use prelude.primitive.machine.Int8
  use prelude.primitive.machine.Int16
  use prelude.primitive.machine.UInt16
  use mach.int.Int32
  use mach.int.Int32BV
  use mach.int.Int64
  use prelude.primitive.machine.Int64BV
  use ieee_float.Float32
  use ieee_float.Float64

  (* importing custom machine type operations *)
  use export prelude.primitive.machine.MachineSupport

  type jbool = bool
  type jbyte = Int8.int8
  type jchar = UInt16.uint16
  type jshort = Int16.int16
  type jint = Int32.int32
  type jlong = Int64.int64
  type jfloat = Float32.t
  type jdouble = Float64.t

  scope Default
    let constant z: jbool = false
    let constant b: jbyte = 0
    let constant s: jshort = 0
    let constant c: jchar = 0
    let constant i: jint = 0
    let constant j: jlong = 0
    let constant f: jfloat = (0.0:jfloat)
    let constant d: jdouble = (0.0:jdouble) 
  end

  let constant jfloat_inf: jfloat = Float32Support.inf
  let constant jfloat_minf: jfloat = Float32Support.minf
  let constant jfloat_nan: jfloat = Float32Support.nan

  let constant jdouble_inf: jdouble = Float64Support.inf
  let constant jdouble_minf: jdouble = Float64Support.minf
  let constant jdouble_nan: jdouble = Float64Support.nan

  (* casting operators *)
  let function z2int (x: jbool) : int = if x then 1 else 0
  let function int2z (x: int) : jbool = if Int.(=) x 0 then false else true
  let function b2int (x: jbyte) : int = Int8.to_int x
  let function int2b (x: int) : jbyte = Int8.of_int (int_to_bounds min_int8 max_int8 x)
  let function s2int (x: jshort) : int = Int16.to_int x
  let function int2s (x: int) : jshort = Int16.of_int (int_to_bounds min_int16 max_int16 x)
  let function c2int (x: jchar) : int = UInt16.to_int x
  let function int2c (x: int) : jchar = UInt16.of_int (int_to_bounds 0 max_uint16 x)
  let function i2int (x: jint) : int = Int32.to_int x
  let function int2i (x: int) : jint = Int32.of_int (int_to_bounds min_int32 max_int32 x)
  let function j2int (x: jlong) : int = Int64.to_int x
  let function int2j (x: int) : jlong = Int64.of_int (int_to_bounds min_int64 max_int64 x)
  let function f2d (x: jfloat) : jdouble = float32_to_float64_java x
  let function f2int (x: jfloat) : int = Float32Support.to_int_java x
  let function int2f (x: int) : jfloat = Float32Support.of_int_java x
  let function d2f (x: jdouble) : jfloat = float64_to_float32_java x
  let function d2int (x: jdouble) : int = Float64Support.to_int_java x
  let function int2d (x: int) : jdouble = Float64Support.of_int_java x
  
  let function dneg (x: jdouble) : jdouble = Float64.neg x
  let function dadd (x y: jdouble) : jdouble = Float64.(.+) x y
  let function dsub (x y: jdouble) : jdouble = Float64.(.-) x y
  let function dmul (x y: jdouble) : jdouble = Float64.(.*) x y
  let function ddiv (x y: jdouble) : jdouble = Float64.(./) x y
  let function drem (x y: jdouble) : jdouble = Float64Support.remainder x y
  let function dcmpl (x y: jdouble) : jint = Float64Support.cmpl x y
  let function dcmpg (x y: jdouble) : jint = Float64Support.cmpg x y

  let function fneg (x: jfloat) : jfloat = Float32.neg x
  let function fadd (x y: jfloat) : jfloat = Float32.(.+) x y
  let function fsub (x y: jfloat) : jfloat = Float32.(.-) x y
  let function fmul (x y: jfloat) : jfloat = Float32.(.*) x y
  let function fdiv (x y: jfloat) : jfloat = Float32.(./) x y
  let function frem (x y: jfloat) : jfloat = Float32Support.remainder x y
  let function fcmpl (x y: jfloat) : jint = Float32Support.cmpl x y
  let function fcmpg (x y: jfloat) : jint = Float32Support.cmpg x y

  let function ineg (x: jint) : jint = Int32.(-_) x
  let function iadd (x y: jint) : jint = Int32.(+) x y
  let function isub (x y: jint) : jint = Int32.(-) x y
  let function imul (x y: jint) : jint = Int32.(*) x y
  let function idiv (x y: jint) : jint = Int32.(/) x y
  let function irem (x y: jint) : jint = Int32.(%) x y
  let function iand (x y: jint) : jint = Int32BV.of_bv (BV32.bw_and (Int32BV.to_bv x) (Int32BV.to_bv y))
  let function ior (x y: jint) : jint = Int32BV.of_bv (BV32.bw_or (Int32BV.to_bv x) (Int32BV.to_bv y))
  let function ixor (x y: jint) : jint = Int32BV.of_bv (BV32.bw_xor (Int32BV.to_bv x) (Int32BV.to_bv y))
  let function ishl (x y: jint) : jint = Int32BV.of_bv (BV32.lsl (Int32BV.to_bv x) (jint_to_ishift y))
  let function ishr (x y: jint) : jint = Int32BV.of_bv (BV32.lsr (Int32BV.to_bv x) (jint_to_ishift y))
  let function iushr (x y: jint) : jint =
    if Int32.(>=) x 0
    then ishr x 0
    else Int32.(+) (ishr x 0) (Int32BV.of_bv (BV32.lsr (Int32BV.to_bv (2:jint)) (Int.(-) 31 (jint_to_ishift y))))

  let function cond_icmpeq (x y: jint) : jbool = Int32.(=) x y
  let function cond_icmpne (x y: jint) : jbool = not (Int32.(=) x y)
  let function cond_icmplt (x y: jint) : jbool = Int32.(<) x y
  let function cond_icmpgt (x y: jint) : jbool = Int32.(>) x y
  let function cond_icmple (x y: jint) : jbool = Int32.(<=) x y
  let function cond_icmpge (x y: jint) : jbool = Int32.(>=) x y
  let function cond_eq (x: jint) : jbool = Int32.(=) x Default.i
  let function cond_ne (x: jint) : jbool = not (Int32.(=) x Default.i)
  let function cond_lt (x: jint) : jbool = Int32.(<) x Default.i
  let function cond_gt (x: jint) : jbool = Int32.(>) x Default.i
  let function cond_le (x: jint) : jbool = Int32.(<=) x Default.i
  let function cond_ge (x: jint) : jbool = Int32.(>=) x Default.i

  let function l2i (x: jlong) : jint = Int32.of_int (int_to_bounds min_int32 max_int32 (Int64.to_int x))
  let function l2f (x: jlong) : jfloat = Float32Support.of_int_java (Int64.to_int x)
  let function l2d (x: jlong) : jdouble = Float64Support.of_int_java (Int64.to_int x)
  let function lneg (x: jlong) : jlong = Int64.(-_) x
  let function ladd (x y: jlong) : jlong = Int64.(+) x y
  let function lsub (x y: jlong) : jlong = Int64.(-) x y
  let function lmul (x y: jlong) : jlong = Int64.(*) x y
  let function ldiv (x y: jlong) : jlong = Int64.(/) x y
  let function lrem (x y: jlong) : jlong = Int64.(%) x y
  let function land (x y: jlong) : jlong = Int64BV.of_bv (BV64.bw_and (Int64BV.to_bv x) (Int64BV.to_bv y))
  let function lor (x y: jlong) : jlong = Int64BV.of_bv (BV64.bw_or (Int64BV.to_bv x) (Int64BV.to_bv y))
  let function lxor (x y: jlong) : jlong = Int64BV.of_bv (BV64.bw_xor (Int64BV.to_bv x) (Int64BV.to_bv y))
  let function lshl (x: jlong) (y: jint) : jlong = Int64BV.of_bv (BV64.lsl (Int64BV.to_bv x) (jint_to_lshift y))
  let function lshr (x: jlong) (y: jint) : jlong = Int64BV.of_bv (BV64.lsr (Int64BV.to_bv x) (jint_to_lshift y))
  let function lushr (x: jlong) (y: jint) : jlong =
    if Int64.(>=) x 0
    then lshr x 0
    else Int64.(+) (lshr x 0) (Int64BV.of_bv (BV64.lsr (Int64BV.to_bv (2:jlong)) (Int.(-) 31 (jint_to_ishift y)))) 
  let function lcmp (x y: jlong) : jint = if Int64.(=) x y then (0:jint) else if Int64.(<) x y then (-1:jint) else (1:jint)

  clone prelude.primitive.support.Logic as BCMP with
    type t = jbyte,
    val feq = Int8.(=),
    val flt = Int8.(<),
    val fgt = Int8.(>),
    val fle = Int8.(<=),
    val fge = Int8.(>=)

  clone prelude.primitive.support.Logic as SCMP with
    type t = jshort,
    val feq = Int16.(=),
    val flt = Int16.(<),
    val fgt = Int16.(>),
    val fle = Int16.(<=),
    val fge = Int16.(>=)

  clone prelude.primitive.support.Logic as CCMP with
    type t = jchar,
    val feq = UInt16.(=),
    val flt = UInt16.(<),
    val fgt = UInt16.(>),
    val fle = UInt16.(<=),
    val fge = UInt16.(>=)

  clone prelude.primitive.support.Logic as ICMP with
    type t = jint,
    val feq = Int32.(=),
    val flt = Int32.(<),
    val fgt = Int32.(>),
    val fle = Int32.(<=),
    val fge = Int32.(>=)

  clone prelude.primitive.support.Logic as JCMP with
    type t = jlong,
    val feq = Int64.(=),
    val flt = Int64.(<),
    val fgt = Int64.(>),
    val fle = Int64.(<=),
    val fge = Int64.(>=)

  clone prelude.primitive.support.Logic as FCMP with
    type t = jfloat,
    val feq = Float32.(.=),
    val flt = Float32.(.<),
    val fgt = Float32.(.>),
    val fle = Float32.(.<=),
    val fge = Float32.(.>=)

  clone prelude.primitive.support.Logic as DCMP with
    type t = jdouble,
    val feq = Float64.(.=),
    val flt = Float64.(.<),
    val fgt = Float64.(.>),
    val fle = Float64.(.<=),
    val fge = Float64.(.>=)
end
