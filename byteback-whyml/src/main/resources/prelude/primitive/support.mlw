module Logic
  type t
  val feq (x y: t) : bool
  val fgt (x y: t) : bool
  val fge (x y: t) : bool
  val flt (x y: t) : bool
  val fle (x y: t) : bool

  let function eq [@inline:trivial] (x y: t) : bool = feq x y
  let function ne [@inline:trivial] (x y: t) : bool = not (feq x y)
  let function gt [@inline:trivial] (x y: t) : bool = fgt x y
  let function ge [@inline:trivial] (x y: t) : bool = fge x y
  let function lt [@inline:trivial] (x y: t) : bool = flt x y
  let function le [@inline:trivial] (x y: t) : bool = fle x y
end
