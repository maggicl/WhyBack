module Ptr
  type t = abstract { }
  
  val constant null: t
end

module Operators
  use Ptr
  use prelude.machine.Operators

  val function cond_ifnull (x: Ptr.t) : jbool ensures { result <-> x = Ptr.null }
  val function cond_ifnotnull (x: Ptr.t) : jbool ensures { result <-> x <> Ptr.null }
  val function acmpeq (x y: Ptr.t) : jbool ensures { result <-> x = y }
  val function acmpne (x y: Ptr.t) : jbool ensures { result <-> x <> y }

  scope LCMP
    val predicate eq (x y: Ptr.t) ensures { result <-> x = y }
    let predicate ne (x y: Ptr.t) = not (eq x y)
  end
end
