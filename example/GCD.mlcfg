module Program
  (* prelude import *)
  use prelude.ptr.Ptr
  use prelude.typing.Type
  use prelude.exceptions.Throw
  use export prelude.bootstrap.Bootstrap
  use export prelude.logic.Operators
  use export prelude.numeric.Operators
  use export prelude.boolean.Operators
  use export prelude.ptr.Operators
  use prelude.heap.Z
  use prelude.heap.B
  use prelude.heap.S
  use prelude.heap.C
  use prelude.heap.I
  use prelude.heap.J
  use prelude.heap.F
  use prelude.heap.D
  use prelude.heap.L
  use prelude.heap.RZ
  use prelude.heap.RB
  use prelude.heap.RS
  use prelude.heap.RC
  use prelude.heap.RI
  use prelude.heap.RJ
  use prelude.heap.RF
  use prelude.heap.RD
  use prelude.heap.Heap

  (* class type hierarchy declaration *)

  scope Java
  scope Io
  scope Serializable
    val constant class: Type.class
  end
  end
  end

  scope Java
  scope Lang
  scope System
    val constant class: Type.class
  end
  end
  end

  scope Java
  scope Lang
  scope AutoCloseable
    val constant class: Type.class
  end
  end
  end

  scope Java
  scope Io
  scope Closeable
    val constant class: Type.class

    axiom hierarchy:
      (Class class :> Class Java.Lang.AutoCloseable.class)
  end
  end
  end

  scope Java
  scope Io
  scope Flushable
    val constant class: Type.class
  end
  end
  end

  scope Java
  scope Io
  scope OutputStream
    val constant class: Type.class

    axiom hierarchy:
      (Class class :> Class Java.Io.Closeable.class) &&
      (Class class :> Class Java.Io.Flushable.class)
  end
  end
  end

  scope Java
  scope Io
  scope FilterOutputStream
    val constant class: Type.class

    axiom hierarchy:
      (Class class :> Class Java.Io.OutputStream.class)
  end
  end
  end

  scope Java
  scope Lang
  scope Appendable
    val constant class: Type.class
  end
  end
  end

  scope Java
  scope Io
  scope PrintStream
    val constant class: Type.class

    axiom hierarchy:
      (Class class :> Class Java.Io.FilterOutputStream.class) &&
      (Class class :> Class Java.Lang.Appendable.class) &&
      (Class class :> Class Java.Io.Closeable.class)
  end
  end
  end

  scope Java
  scope Lang
  scope Comparable
    val constant class: Type.class
  end
  end
  end

  scope Java
  scope Lang
  scope Throwable
    val constant class: Type.class

    axiom hierarchy:
      (Class class :> Class Java.Io.Serializable.class)
  end
  end
  end

  scope Java
  scope Lang
  scope Exception
    val constant class: Type.class

    axiom hierarchy:
      (Class class :> Class Java.Lang.Throwable.class)
  end
  end
  end

  scope Java
  scope Lang
  scope RuntimeException
    val constant class: Type.class

    axiom hierarchy:
      (Class class :> Class Java.Lang.Exception.class)
  end
  end
  end

  scope Java
  scope Lang
  scope Constant
  scope Constable
    val constant class: Type.class
  end
  end
  end
  end

  scope Java
  scope Lang
  scope CharSequence
    val constant class: Type.class
  end
  end
  end

  scope Java
  scope Lang
  scope Constant
  scope ConstantDesc
    val constant class: Type.class
  end
  end
  end
  end

  scope Java
  scope Lang
  scope String
    axiom hierarchy:
      (Class Java.Lang.String.class :> Class Java.Lang.Comparable.class) &&
      (Class Java.Lang.String.class :> Class Java.Lang.Constant.ConstantDesc.class) &&
      (Class Java.Lang.String.class :> Class Java.Lang.Constant.Constable.class) &&
      (Class Java.Lang.String.class :> Class Java.Lang.CharSequence.class) &&
      (Class Java.Lang.String.class :> Class Java.Io.Serializable.class)
  end
  end
  end

  scope Default'8
  scope GCD
    val constant class: Type.class
  end
  end

  scope Java
  scope Lang
  scope IllegalArgumentException
    val constant class: Type.class

    axiom hierarchy:
      (Class class :> Class Java.Lang.RuntimeException.class)
  end
  end
  end

  (* class field declaration *)

  scope Java
  scope Lang
  scope System
    val constant f_in: L.static_field
    axiom f_in_type: f_in.s_type = Type.unknown (* Class Java.Io.InputStream.class *)

    val constant f_out: L.static_field
    axiom f_out_type: f_out.s_type = Class Java.Io.PrintStream.class

    val constant f_err: L.static_field
    axiom f_err_type: f_err.s_type = Class Java.Io.PrintStream.class

    val constant f_NEVER: I.static_field

    val constant f_MAYBE: I.static_field

    val constant f_allowSecurityManager: I.static_field

    val constant f_security: L.static_field
    axiom f_security_type: f_security.s_type = Type.unknown (* Class Java.Lang.SecurityManager.class *)

    val constant f_cons: L.static_field
    axiom f_cons_type: f_cons.s_type = Type.unknown (* Class Java.Io.Console.class *)

    val constant f_initialErrStream: L.static_field
    axiom f_initialErrStream_type: f_initialErrStream.s_type = Class Java.Io.PrintStream.class

    val constant f_props: L.static_field
    axiom f_props_type: f_props.s_type = Type.unknown (* Class Java.Util.Properties.class *)

    val constant f_lineSeparator: L.static_field
    axiom f_lineSeparator_type: f_lineSeparator.s_type = Class Java.Lang.String.class

    val constant f_bootLayer: L.static_field
    axiom f_bootLayer_type: f_bootLayer.s_type = Type.unknown (* Class Java.Lang.ModuleLayer.class *)
  end
  end
  end

  scope Java
  scope Io
  scope FilterOutputStream
    val constant f_out: L.instance_field
    axiom f_out_type: f_out.i_type = Class Java.Io.OutputStream.class

    val constant f_closed: Z.instance_field

    val constant f_closeLock: L.instance_field
    axiom f_closeLock_type: f_closeLock.i_type = Class Java.Lang.Object.class
  end
  end
  end

  scope Java
  scope Io
  scope PrintStream
    val constant f_autoFlush: Z.instance_field

    val constant f_trouble: Z.instance_field

    val constant f_formatter: L.instance_field
    axiom f_formatter_type: f_formatter.i_type = Type.unknown (* Class Java.Util.Formatter.class *)

    val constant f_textOut: L.instance_field
    axiom f_textOut_type: f_textOut.i_type = Type.unknown (* Class Java.Io.BufferedWriter.class *)

    val constant f_charOut: L.instance_field
    axiom f_charOut_type: f_charOut.i_type = Type.unknown (* Class Java.Io.OutputStreamWriter.class *)

    val constant f_closing: Z.instance_field
  end
  end
  end

  scope Java
  scope Lang
  scope Throwable
    val constant f_serialVersionUID: J.static_field

    val constant f_backtrace: L.instance_field
    axiom f_backtrace_type: f_backtrace.i_type = Class Java.Lang.Object.class

    val constant f_detailMessage: L.instance_field
    axiom f_detailMessage_type: f_detailMessage.i_type = Class Java.Lang.String.class

    val constant f_UNASSIGNED'3STACK: L.static_field
    axiom f_UNASSIGNED'3STACK_type: f_UNASSIGNED'3STACK.s_type = Type.unknown (* Type.ArrayOf (Class Java.Lang.StackTraceElement.class) *)

    val constant f_cause: L.instance_field
    axiom f_cause_type: f_cause.i_type = Class Java.Lang.Throwable.class

    val constant f_stackTrace: L.instance_field
    axiom f_stackTrace_type: f_stackTrace.i_type = Type.unknown (* Type.ArrayOf (Class Java.Lang.StackTraceElement.class) *)

    val constant f_depth: I.instance_field

    val constant f_SUPPRESSED'3SENTINEL: L.static_field
    axiom f_SUPPRESSED'3SENTINEL_type: f_SUPPRESSED'3SENTINEL.s_type = Type.unknown (* Class Java.Util.List.class *)

    val constant f_suppressedExceptions: L.instance_field
    axiom f_suppressedExceptions_type: f_suppressedExceptions.i_type = Type.unknown (* Class Java.Util.List.class *)

    val constant f_NULL'3CAUSE'3MESSAGE: L.static_field
    axiom f_NULL'3CAUSE'3MESSAGE_type: f_NULL'3CAUSE'3MESSAGE.s_type = Class Java.Lang.String.class

    val constant f_SELF'3SUPPRESSION'3MESSAGE: L.static_field
    axiom f_SELF'3SUPPRESSION'3MESSAGE_type: f_SELF'3SUPPRESSION'3MESSAGE.s_type = Class Java.Lang.String.class

    val constant f_CAUSE'3CAPTION: L.static_field
    axiom f_CAUSE'3CAPTION_type: f_CAUSE'3CAPTION.s_type = Class Java.Lang.String.class

    val constant f_SUPPRESSED'3CAPTION: L.static_field
    axiom f_SUPPRESSED'3CAPTION_type: f_SUPPRESSED'3CAPTION.s_type = Class Java.Lang.String.class

    val constant f_EMPTY'3THROWABLE'3ARRAY: L.static_field
    axiom f_EMPTY'3THROWABLE'3ARRAY_type: f_EMPTY'3THROWABLE'3ARRAY.s_type = Type.ArrayOf (Class Java.Lang.Throwable.class)

    val constant f_'4assertionsDisabled: Z.static_field
  end
  end
  end

  scope Java
  scope Lang
  scope Exception
    val constant f_serialVersionUID: J.static_field
  end
  end
  end

  scope Java
  scope Lang
  scope RuntimeException
    val constant f_serialVersionUID: J.static_field
  end
  end
  end

  scope Java
  scope Lang
  scope String
    val constant f_value: L.instance_field
    axiom f_value_type: f_value.i_type = ByteArray

    val constant f_coder: B.instance_field

    val constant f_hash: I.instance_field

    val constant f_hashIsZero: Z.instance_field

    val constant f_serialVersionUID: J.static_field

    val constant f_COMPACT'3STRINGS: Z.static_field

    val constant f_serialPersistentFields: L.static_field
    axiom f_serialPersistentFields_type: f_serialPersistentFields.s_type = Type.unknown (* Type.ArrayOf (Class Java.Io.ObjectStreamField.class) *)

    val constant f_REPL: C.static_field

    val constant f_CASE'3INSENSITIVE'3ORDER: L.static_field
    axiom f_CASE'3INSENSITIVE'3ORDER_type: f_CASE'3INSENSITIVE'3ORDER.s_type = Type.unknown (* Class Java.Util.Comparator.class *)

    val constant f_LATIN1: B.static_field

    val constant f_UTF16: B.static_field
  end
  end
  end

  scope Java
  scope Lang
  scope IllegalArgumentException
    val constant f_serialVersionUID: J.static_field
  end
  end
  end

  (* methods *)

  let predicate default'8_GCD_arguments'3are'3positive'7SS'7Z (heap: Heap.t) (p_l0: jshort) (p_l1: jshort) : jbool
  = (ICMP.le (int2i (s2int p_l0)) (0:jint))
  /\. (ICMP.le (int2i (s2int p_l1)) (0:jint))

  val java_lang_IllegalArgumentException_'5init'5'7LJava_Lang_String'6'7V (heap: Heap.t) (this: Ptr.t) (p_0: Ptr.t) : unit
    requires { is_null caughtexception }
    requires { instanceof
      heap
      this
      (Class Java.Lang.IllegalArgumentException.class) }
    requires { isinstance heap p_0 (Class Java.Lang.String.class) }
    ensures { (old true) -> (is_null caughtexception) }

  let rec function default'8_GCD_gcd'3recursive'7SS'7S (heap: Heap.t) (p_l0: jshort) (p_l1: jshort) : jshort
    variant { 0 } (* no variant on method *)
  = if SCMP.eq p_l0 p_l1 then
    p_l0
    else if SCMP.gt p_l0 p_l1 then
      default'8_GCD_gcd'3recursive2'7SS'7S
        heap
        (int2s (i2int (isub (int2i (s2int p_l0)) (int2i (s2int p_l1)))))
        (p_l1)
      else default'8_GCD_gcd'3recursive2'7SS'7S
        heap
        p_l0
        (int2s (i2int (isub (int2i (s2int p_l1)) (int2i (s2int p_l0)))))
  with function default'8_GCD_gcd'3recursive2'7SS'7S (heap: Heap.t) (p_l0: jshort) (p_l1: jshort) : jshort
    variant { 0 } (* no variant on method *)
  = if SCMP.eq p_l0 p_l1 then
    p_l0
    else if SCMP.gt p_l0 p_l1 then
      default'8_GCD_gcd'3recursive'7SS'7S
        heap
        (int2s (i2int (isub (int2i (s2int p_l0)) (int2i (s2int p_l1)))))
        (p_l1)
      else default'8_GCD_gcd'3recursive'7SS'7S
        heap
        p_l0
        (int2s (i2int (isub (int2i (s2int p_l1)) (int2i (s2int p_l0)))))

  let predicate default'8_GCD_test2'7'7Z (heap: Heap.t) : jbool
  = q_forall
    heap
    (fun (heap: Heap.t) (p_'4stack1: jint) -> (ICMP.le p_'4stack1 (0:jint)))

  val java_lang_Object_'5init'5'7'7V (heap: Heap.t) (this: Ptr.t) : unit
    requires { is_null caughtexception }
    requires { instanceof heap this (Class Java.Lang.Object.class) }
    ensures { (old true) -> (is_null caughtexception) }

  let predicate default'8_GCD_arguments'3are'3negative'7SS'7Z (heap: Heap.t) (p_l0: jshort) (p_l1: jshort) : jbool
  = (ICMP.le (int2i (s2int p_l0)) (0:jint))
  \/. (ICMP.le (int2i (s2int p_l1)) (0:jint))

  val java_io_PrintStream_println'7LJava_Lang_String'6'7V (heap: Heap.t) (this: Ptr.t) (p_0: Ptr.t) : unit
    requires { is_null caughtexception }
    requires { instanceof heap this (Class Java.Io.PrintStream.class) }
    requires { isinstance heap p_0 (Class Java.Lang.String.class) }

  val java_lang_String_length'7'7I (heap: Heap.t) (this: Ptr.t) : jint
    requires { is_null caughtexception }
    requires { instanceof heap this (Class Java.Lang.String.class) }

  let cfg default'8_GCD_gcd'7SS'7S (heap: Heap.t) (p_l0: jshort) (p_l1: jshort) : jshort
    requires { is_null caughtexception }
    ensures { (is_null caughtexception)
    -> ((not (default'8_GCD_arguments'3are'3negative'7SS'7Z heap p_l0 p_l1))
    -> (SCMP.eq result (default'8_GCD_gcd'3recursive'7SS'7S heap p_l0 p_l1))) }
    ensures { (old
      ((ICMP.le (int2i (s2int p_l0)) (0:jint))
      \/ (ICMP.le (int2i (s2int p_l1)) (0:jint))))
    -> (instanceof
      heap
      caughtexception
      (Class Java.Lang.IllegalArgumentException.class)) }
    reads { Java.Lang.String.pointers }
    writes { heap.l.pointers }
    writes { caughtexception }
  =
    var lv_l0: jshort;
    var lv_l1: jshort;
    var lv_'4stack7: jint;
    var lv_l2: jshort;
    var lv_l3: jshort;
    var lv_'4stack20: jbyte;
    var lv_'4u0: Ptr.t;
    var lv_'4switch1: jbyte;
    {
      lv_l0 <- Default.s;
      lv_l1 <- Default.s;
      lv_'4stack7 <- Default.i;
      lv_l2 <- Default.s;
      lv_l3 <- Default.s;
      lv_'4stack20 <- Default.b;
      lv_'4u0 <- Ptr.null;
      lv_'4switch1 <- Default.b;
      goto L1
    }
    L1 {
      caughtexception <- Ptr.null;
      lv_l0 <- p_l0;
      lv_l1 <- p_l1;
      switch (ICMP.le (int2i (s2int lv_l0)) (0:jint))
      | True -> goto L3
      | False -> goto L2
      end
    }
    L2 {
      switch (ICMP.gt (int2i (s2int lv_l1)) (0:jint))
      | True -> goto L6
      | False -> goto L3
      end
    }
    L3 {
      lv_'4u0 <- new heap Java.Lang.IllegalArgumentException.class;
      void
        (java_lang_IllegalArgumentException_'5init'5'7LJava_Lang_String'6'7V
          heap
          lv_'4u0
          (Java.Lang.String.literal "Both\x20arguments\x20must\x20be\x20positive"));
      switch (LCMP.eq caughtexception Ptr.null)
      | True -> goto L5
      | False -> goto L4
      end
    }
    L4 {
      return (jthrow caughtexception)
    }
    L5 {
      caughtexception <- lv_'4u0;
      return (jthrow caughtexception)
    }
    L6 {
      lv_'4stack7 <- java_lang_String_length'7'7I
        heap
        (Java.Lang.String.literal "ciao");
      switch (LCMP.eq caughtexception Ptr.null)
      | True -> goto L8
      | False -> goto L7
      end
    }
    L7 {
      return (jthrow caughtexception)
    }
    L8 {
      switch (ICMP.le
        (lcmp (int2j (s2int lv_l0)) (int2j (i2int lv_'4stack7)))
        ((0:jint)))
      | True -> goto L11
      | False -> goto L9
      end
    }
    L9 {
      void
        (java_io_PrintStream_println'7LJava_Lang_String'6'7V
          heap
          (L.gets heap.l Java.Lang.System.f_out)
          (Java.Lang.String.literal "aaaa"));
      switch (LCMP.eq caughtexception Ptr.null)
      | True -> goto L11
      | False -> goto L10
      end
    }
    L10 {
      return (jthrow caughtexception)
    }
    L11 {
      lv_l2 <- lv_l0;
      goto L12
    }
    L12 {
      assert { LCMP.eq caughtexception Ptr.null };
      assert { LCMP.eq caughtexception Ptr.null };
      switch (ICMP.eq (int2i (s2int lv_l2)) (int2i (s2int lv_l3)))
      | True -> goto L22
      | False -> goto L13
      end
    }
    L13 {
      invariant { [@expl:GCD.java: (line 75): invariant might not hold] (ICMP.gt
        (int2i (s2int lv_l2))
        ((0:jint)))
      /\ (ICMP.gt (int2i (s2int lv_l3)) (0:jint)) };
      invariant { [@expl:GCD.java: (line 76): invariant might not hold] SCMP.eq
        (default'8_GCD_gcd'3recursive'7SS'7S heap lv_l2 lv_l3)
        (default'8_GCD_gcd'3recursive'7SS'7S heap lv_l0 lv_l1) };
      switch (ICMP.le (int2i (s2int lv_l2)) (int2i (s2int lv_l3)))
      | True -> goto L15
      | False -> goto L14
      end
    }
    L14 {
      lv_'4stack20 <- (1:jbyte);
      goto L16
    }
    L15 {
      goto L16
    }
    L16 {
      lv_'4switch1 <- lv_'4stack20;
      switch (BCMP.eq lv_'4switch1 (0:jbyte))
      | True -> goto L20
      | False -> goto L17
      end
    }
    L17 {
      switch (BCMP.eq lv_'4switch1 (1:jbyte))
      | True -> goto L19
      | False -> goto L18
      end
    }
    L18 {
      goto L21
    }
    L19 {
      lv_l2 <- int2s (i2int (isub (int2i (s2int lv_l2)) (int2i (s2int lv_l3))));
      goto L12
    }
    L20 {
      lv_l3 <- int2s (i2int (isub (int2i (s2int lv_l3)) (int2i (s2int lv_l2))));
      goto L12
    }
    L21 {
      assert { LCMP.eq caughtexception Ptr.null };
      goto L12
    }
    L22 {
      assert { LCMP.eq caughtexception Ptr.null };
      return lv_l2
    }

  let rec function default'8_GCD_test'7S'7S (heap: Heap.t) (p_l0: jshort) : jshort
    variant { 0 } (* no variant on method *)
  = if SCMP.le p_l0 (0:jshort) then
    (0:jshort)
    else default'8_GCD_test'7S'7S
      heap
      (int2s (i2int (isub (int2i (s2int p_l0)) (1:jint))))

  let cfg default'8_GCD_'5init'5'7'7V (heap: Heap.t) (p_l0: Ptr.t) : unit
    requires { is_null caughtexception }
    requires { instanceof heap p_l0 (Class Default'8.GCD.class) }
    writes { caughtexception }
  =
    var lv_l0: Ptr.t;
    {
      lv_l0 <- Ptr.null;
      goto L1
    }
    L1 {
      caughtexception <- Ptr.null;
      void (java_lang_Object_'5init'5'7'7V heap lv_l0);
      switch (LCMP.eq caughtexception Ptr.null)
      | True -> goto L3
      | False -> goto L2
      end
    }
    L2 {
      return (jthrow caughtexception)
    }
    L3 {
      return ()
    }
end
